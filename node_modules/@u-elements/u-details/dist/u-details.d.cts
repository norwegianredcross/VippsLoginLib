declare const UHTMLElement: {
    new (): HTMLElement;
    prototype: HTMLElement;
};

declare global {
    interface HTMLElementTagNameMap {
        "u-details": HTMLDetailsElement;
        "u-summary": HTMLElement;
    }
}
/**
 * The `<u-details>` HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. A summary or label must be provided using the `<u-summary>` element.
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)
 */
declare class UHTMLDetailsElement extends UHTMLElement {
    _content: HTMLSlotElement | null;
    static get observedAttributes(): string[];
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(prop?: string, prev?: string, next?: string): void;
    handleEvent(event: Event): void;
    get open(): boolean;
    set open(value: boolean);
    get name(): string;
    set name(value: string);
}
/**
 * The `<u-summary>` HTML element specifies a summary, caption, or legend for a `<u-details>` element's disclosure box. Clicking the `<u-summary>` element toggles the state of the parent `<u-details>` element open and closed.
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary)
 */
declare class UHTMLSummaryElement extends UHTMLElement {
    connectedCallback(): void;
}

export { UHTMLDetailsElement, UHTMLSummaryElement };

import type * as PreactTypes from 'preact'
import type * as ReactTypes from 'react'
import type * as SvelteTypes from 'svelte/elements'
import type * as VueJSX from '@vue/runtime-dom'
import type { JSX as QwikJSX } from '@builder.io/qwik/jsx-runtime'
import type { JSX as SolidJSX } from 'solid-js'


export type PreactUdetails = PreactTypes.JSX.IntrinsicElements['details']
export type ReactUdetails = ReactTypes.JSX.IntrinsicElements['details'] & { class?: string }
export type QwikUdetails = QwikJSX.IntrinsicElements['details']
export type VueUdetails = VueJSX.IntrinsicElementAttributes['details']
export type SvelteUdetails = SvelteTypes.SvelteHTMLElements['details']
export type SolidUdetails = SolidJSX.HTMLElementTags['details']

// Augmenting @vue/runtime-dom instead of vue directly to avoid interfering with React JSX
declare global { namespace React.JSX { interface IntrinsicElements { 'u-details': ReactUdetails } } }
declare global { namespace preact.JSX { interface IntrinsicElements { 'u-details': PreactUdetails } } }
declare module '@builder.io/qwik/jsx-runtime' { export namespace JSX { export interface IntrinsicElements { 'u-details': QwikUdetails } } }
declare module '@vue/runtime-dom' { export interface GlobalComponents { 'u-details': VueUdetails } }
declare module 'svelte/elements' { interface SvelteHTMLElements { 'u-details': SvelteUdetails } }
declare module 'solid-js' {
  namespace JSX {
    interface IntrinsicElements { 'u-details': SolidUdetails }
    interface CustomEvents {  }
  }
}
export type PreactUsummary = PreactTypes.JSX.IntrinsicElements['summary']
export type ReactUsummary = ReactTypes.JSX.IntrinsicElements['summary'] & { class?: string }
export type QwikUsummary = QwikJSX.IntrinsicElements['summary']
export type VueUsummary = VueJSX.IntrinsicElementAttributes['summary']
export type SvelteUsummary = SvelteTypes.SvelteHTMLElements['summary']
export type SolidUsummary = SolidJSX.HTMLElementTags['summary']

// Augmenting @vue/runtime-dom instead of vue directly to avoid interfering with React JSX
declare global { namespace React.JSX { interface IntrinsicElements { 'u-summary': ReactUsummary } } }
declare global { namespace preact.JSX { interface IntrinsicElements { 'u-summary': PreactUsummary } } }
declare module '@builder.io/qwik/jsx-runtime' { export namespace JSX { export interface IntrinsicElements { 'u-summary': QwikUsummary } } }
declare module '@vue/runtime-dom' { export interface GlobalComponents { 'u-summary': VueUsummary } }
declare module 'svelte/elements' { interface SvelteHTMLElements { 'u-summary': SvelteUsummary } }
declare module 'solid-js' {
  namespace JSX {
    interface IntrinsicElements { 'u-summary': SolidUsummary }
    interface CustomEvents {  }
  }
}
