declare const UHTMLElement: {
    new (): HTMLElement;
    prototype: HTMLElement;
};

declare global {
    interface HTMLElementTagNameMap {
        "u-option": HTMLOptionElement;
    }
}
/**
 * The `<u-option>` HTML element is used to define an item contained in a `<u-datalist>` element. As such, <u-option> can represent lists of items in an HTML document.
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)
 */
declare class UHTMLOptionElement extends UHTMLElement {
    static get observedAttributes(): string[];
    constructor();
    connectedCallback(): void;
    attributeChangedCallback(): void;
    /** Sets or retrieves whether the option in the list box is the default item. */
    get defaultSelected(): boolean;
    set defaultSelected(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    /** Retrieves a reference to the form that the object is embedded in. */
    get form(): HTMLFormElement | null;
    /** Sets or retrieves the ordinal position of an option in a list box. */
    get index(): number;
    /** Sets or retrieves a value that you can use to implement your own label functionality for the object. */
    get label(): string;
    set label(value: string);
    get selected(): boolean;
    set selected(value: boolean);
    /** Sets or retrieves the text string specified by the option tag. */
    get text(): string;
    set text(text: string);
    /** Sets or retrieves the value which is returned to the server when the form control is submitted. */
    get value(): string;
    set value(value: string);
}

declare global {
    interface HTMLElementTagNameMap {
        "u-datalist": HTMLDataListElement;
    }
}
/**
 * The `<u-datalist>` HTML element contains a set of `<u-option>` elements that represent the permissible or recommended options available to choose from within other controls.
 * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist)
 */
declare class UHTMLDataListElement extends UHTMLElement {
    _blurTimer: ReturnType<typeof setTimeout> | number;
    _input: HTMLInputElement | null;
    _root: null | Document | ShadowRoot;
    _value: string;
    _texts: {
        singular: string;
        plural: string;
    };
    static get observedAttributes(): string[];
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(prop?: string, _prev?: string, next?: string): void;
    handleEvent(event: Event): void;
    get options(): HTMLCollectionOf<HTMLOptionElement>;
}
declare const getDatalistValue: ({ value, }: HTMLInputElement | HTMLOptionElement | UHTMLOptionElement) => string;
declare function isDatalistClick(event: unknown): boolean;
declare function syncDatalistState(input: HTMLInputElement): void;

export { UHTMLDataListElement, UHTMLOptionElement, getDatalistValue, isDatalistClick, syncDatalistState };

import type * as PreactTypes from 'preact'
import type * as ReactTypes from 'react'
import type * as SvelteTypes from 'svelte/elements'
import type * as VueJSX from '@vue/runtime-dom'
import type { JSX as QwikJSX } from '@builder.io/qwik/jsx-runtime'
import type { JSX as SolidJSX } from 'solid-js'


export type PreactUdatalist = PreactTypes.JSX.IntrinsicElements['datalist']
export type ReactUdatalist = ReactTypes.JSX.IntrinsicElements['datalist'] & { class?: string }
export type QwikUdatalist = QwikJSX.IntrinsicElements['datalist']
export type VueUdatalist = VueJSX.IntrinsicElementAttributes['datalist']
export type SvelteUdatalist = SvelteTypes.SvelteHTMLElements['datalist']
export type SolidUdatalist = SolidJSX.HTMLElementTags['datalist']

// Augmenting @vue/runtime-dom instead of vue directly to avoid interfering with React JSX
declare global { namespace React.JSX { interface IntrinsicElements { 'u-datalist': ReactUdatalist } } }
declare global { namespace preact.JSX { interface IntrinsicElements { 'u-datalist': PreactUdatalist } } }
declare module '@builder.io/qwik/jsx-runtime' { export namespace JSX { export interface IntrinsicElements { 'u-datalist': QwikUdatalist } } }
declare module '@vue/runtime-dom' { export interface GlobalComponents { 'u-datalist': VueUdatalist } }
declare module 'svelte/elements' { interface SvelteHTMLElements { 'u-datalist': SvelteUdatalist } }
declare module 'solid-js' {
  namespace JSX {
    interface IntrinsicElements { 'u-datalist': SolidUdatalist }
    interface CustomEvents {  }
  }
}
import type * as PreactTypes from 'preact'
import type * as ReactTypes from 'react'
import type * as SvelteTypes from 'svelte/elements'
import type * as VueJSX from '@vue/runtime-dom'
import type { JSX as QwikJSX } from '@builder.io/qwik/jsx-runtime'
import type { JSX as SolidJSX } from 'solid-js'


export type PreactUoption = PreactTypes.JSX.IntrinsicElements['option']
export type ReactUoption = ReactTypes.JSX.IntrinsicElements['option'] & { class?: string }
export type QwikUoption = QwikJSX.IntrinsicElements['option']
export type VueUoption = VueJSX.IntrinsicElementAttributes['option']
export type SvelteUoption = SvelteTypes.SvelteHTMLElements['option']
export type SolidUoption = SolidJSX.HTMLElementTags['option']

// Augmenting @vue/runtime-dom instead of vue directly to avoid interfering with React JSX
declare global { namespace React.JSX { interface IntrinsicElements { 'u-option': ReactUoption } } }
declare global { namespace preact.JSX { interface IntrinsicElements { 'u-option': PreactUoption } } }
declare module '@builder.io/qwik/jsx-runtime' { export namespace JSX { export interface IntrinsicElements { 'u-option': QwikUoption } } }
declare module '@vue/runtime-dom' { export interface GlobalComponents { 'u-option': VueUoption } }
declare module 'svelte/elements' { interface SvelteHTMLElements { 'u-option': SvelteUoption } }
declare module 'solid-js' {
  namespace JSX {
    interface IntrinsicElements { 'u-option': SolidUoption }
    interface CustomEvents {  }
  }
}
