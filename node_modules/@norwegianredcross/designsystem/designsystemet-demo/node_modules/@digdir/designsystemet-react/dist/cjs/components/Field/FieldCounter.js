'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var fieldObserver = require('./fieldObserver.js');
var ValidationMessage = require('../ValidationMessage/ValidationMessage.js');
var Paragraph = require('../Paragraph/Paragraph.js');

const label = (text, count) => text.replace('%d', Math.abs(count).toString());
/**
 * FieldCounter component, used to display a counter for a form field.
 *
 * @example
 * <Field>
 *   <Input />
 *   <Field.Counter limit={100} under='%d tegn igjen' over='%d tegn for mye' />
 * </Field>
 */
const FieldCounter = react.forwardRef(function FieldCounter({ limit, under = '%d tegn igjen', over = '%d tegn for mye', ...rest }, ref) {
    const [count, setCount] = react.useState(0);
    const counterRef = react.useRef(null);
    const hasExceededLimit = count > limit;
    const remainder = limit - count;
    react.useEffect(() => {
        const field = counterRef.current?.closest('.ds-field');
        const input = Array.from(field?.getElementsByTagName('*') || []).find(fieldObserver.isInputLike);
        const onInput = ({ target }) => {
            if (fieldObserver.isInputLike(target))
                setCount(target.value.length);
        };
        if (input)
            onInput({ target: input }); // Initial setup
        field?.addEventListener('input', onInput);
        return () => field?.removeEventListener('input', onInput);
    }, [setCount]);
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("div", { "data-field": 'description', className: 'ds-sr-only', "aria-live": 'polite', ref: counterRef, children: hasExceededLimit && label(over, remainder) }), hasExceededLimit ? (jsxRuntime.jsx(ValidationMessage.ValidationMessage, { ref: ref, ...rest, children: label(over, remainder) })) : (jsxRuntime.jsx(Paragraph.Paragraph, { ref: ref, ...rest, "data-field": 'validation', children: label(under, remainder) }))] }));
});

exports.FieldCounter = FieldCounter;
