'use client';
'use strict';

var react = require('react');
var Option = require('./Option/Option.js');
var utilities = require('./utilities.js');

const isOption = (option) => !!option;
function useCombobox({ children, inputValue, multiple, filter = (inputValue, option) => {
    return option.label.toLowerCase().startsWith(inputValue.toLowerCase());
}, initialValue, }) {
    const filterCallback = react.useCallback(filter, [filter]);
    const { optionsChildren, customIds, restChildren, interactiveChildren } = react.useMemo(() => {
        const allChildren = react.Children.toArray(children);
        const result = allChildren.reduce((acc, child) => {
            if (Option.isComboboxOption(child)) {
                acc.optionsChildren.push(child);
            }
            else {
                acc.restChildren.push(child);
                if (utilities.isInteractiveComboboxCustom(child)) {
                    const childElement = child;
                    acc.interactiveChildren.push(childElement);
                    if (!childElement.props.id) {
                        throw new Error('If ComboboxCustom is interactive, it must have an id');
                    }
                    acc.customIds.push(childElement.props.id);
                }
            }
            return acc;
        }, {
            optionsChildren: [],
            customIds: [],
            restChildren: [],
            interactiveChildren: [],
        });
        return result;
    }, [children]);
    const options = react.useMemo(() => {
        const values = [];
        const allOptions = {};
        optionsChildren.map((child) => {
            const props = child.props;
            let label = props.displayValue || '';
            if (!props.displayValue) {
                let childrenLabel = '';
                // go over children and find all strings
                react.Children.forEach(props.children, (child) => {
                    if (typeof child === 'string') {
                        childrenLabel += child;
                    }
                    else {
                        throw new Error('If ComboboxOption is not a string, it must have a displayValue prop');
                    }
                });
                label = childrenLabel;
            }
            if (values.includes(props.value)) {
                console.warn(`Combobox has multiple options with the same value: ${props.value}`);
            }
            values.push(props.value);
            allOptions[utilities.prefix(String(props.value))] = {
                value: String(props.value),
                label,
                displayValue: props.displayValue,
                description: props.description,
            };
        });
        return allOptions;
    }, [optionsChildren]);
    const preSelectedOptions = react.useMemo(() => (initialValue?.map((key) => {
        return utilities.prefix(key);
    }) || []).reduce((acc, value) => {
        const option = options[value];
        if (isOption(option)) {
            acc[value] = option;
        }
        return acc;
    }, {}), [initialValue, options]);
    const [selectedOptions, setSelectedOptions] = react.useState(preSelectedOptions);
    const { filteredOptions, filteredOptionsChildren } = react.useMemo(() => {
        const filteredOptions = [];
        const filteredOptionsChildren = Object.keys(options)
            .map((option, index) => {
            /* If we have a selected value in single mode and the input matches an option, return all children */
            if (!multiple && Object.keys(selectedOptions).length === 1) {
                filteredOptions.push(option);
                return optionsChildren[index];
            }
            if (multiple && selectedOptions[option]) {
                filteredOptions.push(option);
                return optionsChildren[index];
            }
            if (filterCallback(inputValue, options[option])) {
                filteredOptions.push(option);
                return optionsChildren[index];
            }
            return;
        })
            .filter((child) => child);
        return { filteredOptions, filteredOptionsChildren };
    }, [
        filterCallback,
        inputValue,
        multiple,
        options,
        optionsChildren,
        selectedOptions,
    ]);
    return {
        filteredOptionsChildren,
        filteredOptions,
        restChildren,
        options,
        customIds,
        selectedOptions,
        interactiveChildren,
        setSelectedOptions,
    };
}

exports.useCombobox = useCombobox;
