'use client';
'use strict';

var react = require('react');

function useDebounceCallback(callback, delay = 50) {
    const timeoutRef = react.useRef(null);
    react.useEffect(() => {
        // Cleanup the previous timeout on re-render
        return () => {
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
            }
        };
    }, []);
    const debouncedCallback = (...args) => {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }
        timeoutRef.current = window.setTimeout(() => {
            callback(...args);
        }, delay);
    };
    return debouncedCallback;
}

exports.useDebounceCallback = useDebounceCallback;
