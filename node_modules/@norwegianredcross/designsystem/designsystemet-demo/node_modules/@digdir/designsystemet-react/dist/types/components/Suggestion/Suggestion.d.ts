import { type HTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
type SuggestionContextType = {
    listId?: string;
    inputRef?: React.RefObject<HTMLInputElement | null>;
    setListId?: (id: string) => void;
    handleFilter?: (input?: HTMLInputElement | null) => void;
};
export declare const SuggestionContext: React.Context<SuggestionContextType>;
export type SuggestionProps = MergeRight<DefaultProps & HTMLAttributes<HTMLDivElement>, {
    /**
     * Filter options, either true, false or a custom callback () => boolean
     *
     * If true, the <datalist> will handle filtering.
     * If false, the <datalist> will not handle filtering.
     * If a custom callback, the callback will be used to filter the <option> elements.
     *
     * @default true
     */
    filter?: boolean | ((args: {
        /**
         * Index of the `option`
         */
        index: number;
        /**
         * Text content of the `option`
         */
        text: string;
        /**
         * Value of the `option`
         */
        value: string;
        /**
         * The DOM element of the `option`
         */
        optionElement: HTMLOptionElement;
        /**
         * The DOM element of the `input`
         */
        input: HTMLInputElement;
    }) => boolean);
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
}>;
/**
 * A component that provides a suggestion list for an input field.
 *
 * @example
 * <Suggestion>
 *   <Suggestion.Input />
 *   <Suggestion.Clear />
 *   <Suggestion.List>
 *     <Suggestion.Empty>Tomt</Suggestion.Empty>
 *     <Suggestion.Option value='Option 1'>Option 1</Suggestion.Option>
 *     <Suggestion.Option value='Option 2'>Option 2</Suggestion.Option>
 *   </Suggestion.List>
 * </Suggestion>
 */
export declare const Suggestion: React.ForwardRefExoticComponent<Omit<DefaultProps & HTMLAttributes<HTMLDivElement>, "filter" | "asChild"> & {
    /**
     * Filter options, either true, false or a custom callback () => boolean
     *
     * If true, the <datalist> will handle filtering.
     * If false, the <datalist> will not handle filtering.
     * If a custom callback, the callback will be used to filter the <option> elements.
     *
     * @default true
     */
    filter?: boolean | ((args: {
        /**
         * Index of the `option`
         */
        index: number;
        /**
         * Text content of the `option`
         */
        text: string;
        /**
         * Value of the `option`
         */
        value: string;
        /**
         * The DOM element of the `option`
         */
        optionElement: HTMLOptionElement;
        /**
         * The DOM element of the `input`
         */
        input: HTMLInputElement;
    }) => boolean);
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & React.RefAttributes<HTMLDivElement>>;
export {};
//# sourceMappingURL=Suggestion.d.ts.map