'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactSlot = require('@radix-ui/react-slot');
var react = require('react');
var Button = require('../Button/Button.js');
var PopoverTriggerContext = require('./PopoverTriggerContext.js');

/**
 * PopoverTrigger component, used to trigger a popover.
 *
 * @example
 * <Popover.TriggerContext>
 *   <Popover.Trigger>Open Popover</Popover.Trigger>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 *
 * @example inline
 * <Popover.TriggerContext>
 *   <Paragraph>
 *    We can use it <Popover.Trigger inline={true}>inline</Popover.Trigger>.
 *   </Paragraph>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 */
const PopoverTrigger = react.forwardRef(function PopoverTrigger({ id, inline, asChild, ...rest }, ref) {
    const { popoverId } = react.useContext(PopoverTriggerContext.Context);
    const Component = asChild ? reactSlot.Slot : inline ? 'button' : Button.Button;
    const popoverProps = Object.assign({
        [react.version.startsWith('19') ? 'popoverTarget' : 'popovertarget']: popoverId,
        ...(inline
            ? {
                'data-popover': 'inline',
            }
            : {}),
    }, rest);
    return jsxRuntime.jsx(Component, { ref: ref, ...popoverProps });
});

exports.PopoverTrigger = PopoverTrigger;
