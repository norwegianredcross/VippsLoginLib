'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { Slot, Slottable } from '@radix-ui/react-slot';
import cl from 'clsx/lite';
import { forwardRef } from 'react';
import { Input } from '../Input/Input.js';

/**
 * Chip.Button used for interaction
 *
 * @example
 * <Chip.Button>Click me</Chip.Button>
 */
const ChipButton = forwardRef(function ChipButton({ asChild, className, ...rest }, ref) {
    const Component = asChild ? Slot : 'button';
    return (jsx(Component, { className: cl('ds-chip', className), type: asChild ? undefined : 'button', ref: ref, ...rest }));
});
/**
 * Chip.Removable used for interaction
 * @example
 * <Chip.Removable>Click to remove me</Chip.Removable>
 */
const ChipRemovable = forwardRef(function ChipRemovable(props, ref) {
    return jsx(ChipButton, { "data-removable": true, ref: ref, ...props });
});
/**
 * Chip.Checkbox used for multiselection
 * @example
 * <Chip.Checkbox name="language" value="nynorsk">Nynorsk</Chip.Checkbox>
 * <Chip.Checkbox name="language" value="bokm책l">Bokm책l</Chip.Checkbox>
 */
const ChipCheckbox = forwardRef(function ChipCheckbox({ asChild, children, className, 'data-size': size, 'data-color': color, ...rest }, ref) {
    const inputType = rest.type ?? 'checkbox';
    const Component = asChild ? Slot : 'label';
    return (jsxs(Component, { className: cl('ds-chip', className), "data-size": size, "data-color": color, ref: ref, children: [jsx(Input, { ...rest, type: inputType }), jsx(Slottable, { children: children })] }));
});
/**
 * Chip.Radio used for single selection
 * @example
 * <Chip.Radio name="language" value="nynorsk">Nynorsk</Chip.Radio>
 * <Chip.Radio name="language" value="bokm책l">Bokm책l</Chip.Radio>
 */
const ChipRadio = forwardRef(function ChipRadio(props, ref) {
    return jsx(ChipCheckbox, { ref, type: 'radio', ...props });
});

export { ChipButton, ChipCheckbox, ChipRadio, ChipRemovable };
