'use client';
import { jsx } from 'react/jsx-runtime';
import { useMergeRefs } from '@floating-ui/react';
import { getDatalistValue, isDatalistClick } from '@u-elements/u-datalist';
import { forwardRef, useContext, useCallback, useEffect } from 'react';
import { SuggestionContext } from './Suggestion.js';
import { Input } from '../Input/Input.js';

/**
 * Component that provides an input field for the suggestion list.
 *
 * Place as a descendant of `Suggestion`
 *
 * @example
 * <Suggestion>
 *   <Suggestion.Input />
 *   <Suggestion.List />
 * </Suggestion>
 */
const SuggestionInput = forwardRef(function SuggestionList({ value, onInput, ...rest }, ref) {
    const { listId, inputRef, handleFilter } = useContext(SuggestionContext);
    const mergedRefs = useMergeRefs([inputRef, ref]);
    const updateSelected = useCallback(() => {
        const { list, value } = inputRef?.current || {};
        for (const option of list?.options || []) {
            option.selected = getDatalistValue(option) === value;
        }
    }, []);
    // Update also if controlled value
    useEffect(() => {
        updateSelected();
        handleFilter?.(inputRef?.current);
    }, [value]);
    return (jsx(Input, { ref: mergedRefs, list: listId, value: value, onInput: (event) => {
            onInput?.(event); // Should run first
            updateSelected();
            if (!isDatalistClick(event.nativeEvent))
                handleFilter?.(inputRef?.current);
        }, placeholder: '' // We need an empty placeholder for the clear button to be able to show/hide
        , ...rest }));
});

export { SuggestionInput };
