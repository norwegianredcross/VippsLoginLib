'use client';
import { jsx } from 'react/jsx-runtime';
import { forwardRef, useContext } from 'react';
import { MultiSuggestionContext } from './MultiSuggestion.js';
import { Button } from '../Button/Button.js';

/**
 * Component that provides a clear button for the MultiSuggestion input.
 *
 * Place as a descendant of `MultiSuggestion`
 *
 * @example
 * <MultiSuggestion>
 *   <MultiSuggestion.Input />
 *   <MultiSuggestion.Clear />
 *   <MultiSuggestion.List />
 * </MultiSuggestion>
 */
const MultiSuggestionClear = forwardRef(function MultiSuggestionClear({ 'aria-label': label = 'TÃ¸m', onClick, ...rest }, ref) {
    const { inputRef } = useContext(MultiSuggestionContext); //, handleValueChange
    const handleClear = (event) => {
        if (!inputRef?.current)
            throw new Error('Input is missing');
        /* narrow type to make TS happy */
        if (!(inputRef?.current instanceof HTMLInputElement))
            throw new Error('Input is not an input element');
        event.preventDefault();
        setReactInputValue(inputRef.current, '');
        inputRef.current.focus();
        onClick?.(event);
    };
    return (jsx(Button, { ref: ref, variant: 'tertiary', type: 'reset', "aria-label": label, onClick: handleClear, icon: true, ...rest }));
});
// Copied from https://github.com/facebook/react/issues/11488#issuecomment-1300987446
const setReactInputValue = (input, value) => {
    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;
    if (nativeInputValueSetter) {
        nativeInputValueSetter.call(input, value);
    }
    else {
        throw new Error('Unable to find the native input value setter');
    }
    const inputEvent = new Event('input', { bubbles: true });
    const changeEvent = new Event('change', { bubbles: true });
    input.dispatchEvent(inputEvent);
    input.dispatchEvent(changeEvent);
};

export { MultiSuggestionClear, setReactInputValue };
