'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var cl = require('clsx/lite');
var react = require('react');
var omit = require('../../../utilities/omit/omit.js');
var ComboboxContext = require('../ComboboxContext.js');
var Description = require('./Description.js');
var SelectedIcon = require('./SelectedIcon.js');
var useComboboxOption = require('./useComboboxOption.js');
var Label = require('../../Label/Label.js');

const ComboboxOption = react.memo(react.forwardRef(({ value, description, children, className, ...rest }, forwardedRef) => {
    const labelId = react.useId();
    const { id, ref, selected, active, onOptionClick } = useComboboxOption.useComboboxOption({
        id: rest.id,
        ref: forwardedRef,
        value,
    });
    const context = react.useContext(ComboboxContext.ComboboxContext);
    if (!context) {
        throw new Error('ComboboxOption must be used within a Combobox');
    }
    const { size, multiple, getItemProps } = context;
    const props = getItemProps();
    return (jsxRuntime.jsx(Label.Label, { "data-size": 'md', asChild: true, children: jsxRuntime.jsxs("button", { ref: ref, id: id, 
            // biome-ignore lint/a11y/useSemanticElements: biome wants me to use the <option> element
            role: 'option', type: 'button', "aria-selected": !!selected, "aria-labelledby": labelId, tabIndex: -1, onClick: (e) => {
                onOptionClick();
                rest.onClick?.(e);
            }, className: cl('ds-combobox__option', active && 'ds-combobox__option--active', multiple && 'ds-combobox__option--multiple', className), ...omit.omit(['displayValue'], rest), ...omit.omit(['onClick', 'onPointerLeave'], props), children: [jsxRuntime.jsx(Label.Label, { asChild: true, "data-size": size, children: jsxRuntime.jsx("span", { children: jsxRuntime.jsx(SelectedIcon.SelectedIcon, { multiple: multiple, selected: !!selected }) }) }), jsxRuntime.jsxs(Label.Label, { className: 'ds-combobox__option__label', "data-size": size, id: labelId, children: [children, description && (jsxRuntime.jsx(Description, { children: description }))] })] }) }));
}));
ComboboxOption.displayName = 'ComboboxOption';
function isComboboxOption(child) {
    return react.isValidElement(child) && child.type === ComboboxOption;
}

exports.ComboboxOption = ComboboxOption;
exports.isComboboxOption = isComboboxOption;
