'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react$1 = require('@floating-ui/react');
var uDatalist = require('@u-elements/u-datalist');
var react = require('react');
var Suggestion = require('./Suggestion.js');
var Input = require('../Input/Input.js');

/**
 * Component that provides an input field for the suggestion list.
 *
 * Place as a descendant of `Suggestion`
 *
 * @example
 * <Suggestion>
 *   <Suggestion.Input />
 *   <Suggestion.List />
 * </Suggestion>
 */
const SuggestionInput = react.forwardRef(function SuggestionList({ value, onInput, ...rest }, ref) {
    const { listId, inputRef, handleFilter } = react.useContext(Suggestion.SuggestionContext);
    const mergedRefs = react$1.useMergeRefs([inputRef, ref]);
    const updateSelected = react.useCallback(() => {
        const { list, value } = inputRef?.current || {};
        for (const option of list?.options || []) {
            option.selected = uDatalist.getDatalistValue(option) === value;
        }
    }, []);
    // Update also if controlled value
    react.useEffect(() => {
        updateSelected();
        handleFilter?.(inputRef?.current);
    }, [value]);
    return (jsxRuntime.jsx(Input.Input, { ref: mergedRefs, list: listId, value: value, onInput: (event) => {
            onInput?.(event); // Should run first
            updateSelected();
            if (!uDatalist.isDatalistClick(event.nativeEvent))
                handleFilter?.(inputRef?.current);
        }, placeholder: '' // We need an empty placeholder for the clear button to be able to show/hide
        , ...rest }));
});

exports.SuggestionInput = SuggestionInput;
