'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactSlot = require('@radix-ui/react-slot');
var cl = require('clsx/lite');
var react = require('react');
var Input = require('../Input/Input.js');

/**
 * Chip.Button used for interaction
 *
 * @example
 * <Chip.Button>Click me</Chip.Button>
 */
const ChipButton = react.forwardRef(function ChipButton({ asChild, className, ...rest }, ref) {
    const Component = asChild ? reactSlot.Slot : 'button';
    return (jsxRuntime.jsx(Component, { className: cl('ds-chip', className), type: asChild ? undefined : 'button', ref: ref, ...rest }));
});
/**
 * Chip.Removable used for interaction
 * @example
 * <Chip.Removable>Click to remove me</Chip.Removable>
 */
const ChipRemovable = react.forwardRef(function ChipRemovable(props, ref) {
    return jsxRuntime.jsx(ChipButton, { "data-removable": true, ref: ref, ...props });
});
/**
 * Chip.Checkbox used for multiselection
 * @example
 * <Chip.Checkbox name="language" value="nynorsk">Nynorsk</Chip.Checkbox>
 * <Chip.Checkbox name="language" value="bokm책l">Bokm책l</Chip.Checkbox>
 */
const ChipCheckbox = react.forwardRef(function ChipCheckbox({ asChild, children, className, 'data-size': size, 'data-color': color, ...rest }, ref) {
    const inputType = rest.type ?? 'checkbox';
    const Component = asChild ? reactSlot.Slot : 'label';
    return (jsxRuntime.jsxs(Component, { className: cl('ds-chip', className), "data-size": size, "data-color": color, ref: ref, children: [jsxRuntime.jsx(Input.Input, { ...rest, type: inputType }), jsxRuntime.jsx(reactSlot.Slottable, { children: children })] }));
});
/**
 * Chip.Radio used for single selection
 * @example
 * <Chip.Radio name="language" value="nynorsk">Nynorsk</Chip.Radio>
 * <Chip.Radio name="language" value="bokm책l">Bokm책l</Chip.Radio>
 */
const ChipRadio = react.forwardRef(function ChipRadio(props, ref) {
    return jsxRuntime.jsx(ChipCheckbox, { ref, type: 'radio', ...props });
});

exports.ChipButton = ChipButton;
exports.ChipCheckbox = ChipCheckbox;
exports.ChipRadio = ChipRadio;
exports.ChipRemovable = ChipRemovable;
