'use client';
import { jsx } from 'react/jsx-runtime';
import { useMergeRefs } from '@floating-ui/react';
import cl from 'clsx/lite';
import { forwardRef, useRef, useEffect } from 'react';
import '@u-elements/u-details';

/**
 * Details component, contains `Details.Summary` and `Details.Content` components.
 *
 * @example
 * <Details>
 *  <Details.Summary>Header</Details.Summary>
 *  <Details.Content>Content</Details.Content>
 * </Details>
 */
const Details = forwardRef(function Details({ className, open, defaultOpen = false, variant = 'default', onToggle, ...rest }, ref) {
    const detailsRef = useRef(null);
    const initialOpen = useRef(defaultOpen); // Allow rendering defaultOpen on server, but only render once on client
    const mergedRefs = useMergeRefs([detailsRef, ref]);
    const onToggleRef = useRef(onToggle); // Using ref to enable access inside useEffect without re-binding event listeners
    const openRef = useRef(open);
    onToggleRef.current = onToggle;
    openRef.current = open;
    // Provide onToggle event and controlled state
    useEffect(() => {
        const details = detailsRef.current;
        const handleToggle = (event) => {
            if (!details || details?.open === openRef.current)
                return;
            onToggleRef.current?.(event);
            if (openRef.current !== undefined)
                details.open = openRef.current; // Don't update DOM unless controlled state changes
        };
        details?.addEventListener('toggle', handleToggle, true);
        return () => details?.removeEventListener('toggle', handleToggle, true);
    }, []);
    return (jsx("u-details", { class: cl('ds-details', className), open: (open ?? initialOpen.current) || undefined, "data-variant": variant, ref: mergedRefs, ...rest }));
});

export { Details };
