import type { ReactElement, ReactNode } from 'react';
import type { ComboboxProps } from './Combobox';
import type { ComboboxCustomProps } from './Custom';
import { type ComboboxOptionProps } from './Option/Option';
export type UseComboboxProps = {
    children: ReactNode;
    inputValue: string;
    multiple: boolean;
    filter?: NonNullable<ComboboxProps['filter']>;
    initialValue?: string[];
};
export type Option = {
    value: string;
    label: string;
    displayValue?: string;
    description?: string;
};
export declare function useCombobox({ children, inputValue, multiple, filter, initialValue, }: UseComboboxProps): {
    filteredOptionsChildren: (ReactElement<ComboboxOptionProps, string | React.JSXElementConstructor<any>> | undefined)[];
    filteredOptions: string[];
    restChildren: ReactNode[];
    options: {
        [key: string]: Option;
    };
    customIds: string[];
    selectedOptions: {
        [key: string]: Option;
    };
    interactiveChildren: ReactElement<ComboboxCustomProps, string | React.JSXElementConstructor<any>>[];
    setSelectedOptions: React.Dispatch<React.SetStateAction<{
        [key: string]: Option;
    }>>;
};
//# sourceMappingURL=useCombobox.d.ts.map