import type { Color, SeverityColors } from '@digdir/designsystemet-react/colors';
import type { Placement } from '@floating-ui/dom';
import type { HTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
declare global {
    namespace React.JSX {
        interface IntrinsicAttributes {
            popovertarget?: string;
        }
    }
    namespace React {
        interface HTMLAttributes<T> {
            popovertarget?: string;
        }
    }
}
export type PopoverProps = MergeRight<DefaultProps & HTMLAttributes<HTMLDivElement>, {
    /**
     * id to connect the trigger with the popover - required when not using Popover.Context.
     */
    id?: string;
    /**
     * Placement of the popover on the trigger.
     * @default 'top'
     */
    placement?: Placement;
    /**
     * When a boolean is provided, the popover will be controlled.
     * @default undefined
     */
    open?: boolean;
    /**
     * Change the background color of the popover.
     *
     * @default 'default'
     */
    variant?: 'default' | 'tinted';
    /**
     * Change the color scheme of the popover
     */
    'data-color'?: Color | SeverityColors;
    /**
     * Callback when the popover wants to open.
     */
    onOpen?: () => void;
    /**
     * Callback when the popover wants to close.
     */
    onClose?: () => void;
    /**
     * Whether to enable auto placement.
     * @default true
     */
    autoPlacement?: boolean;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
}>;
/**
 * Popover component, used to display content in a popover over an element.
 *
 * @example with TriggerContext
 * <Popover.TriggerContext>
 *   <Popover.Trigger>Open Popover</Popover.Trigger>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 *
 * @example without TriggerContext
 * <Button popovertarget="my-popover">Open Popover</Button>
 * <Popover id="my-popover">
 *   Content
 * </Popover>
 */
export declare const Popover: React.ForwardRefExoticComponent<Omit<DefaultProps & HTMLAttributes<HTMLDivElement>, "id" | "data-color" | "variant" | "asChild" | "open" | "placement" | "onClose" | "onOpen" | "autoPlacement"> & {
    /**
     * id to connect the trigger with the popover - required when not using Popover.Context.
     */
    id?: string;
    /**
     * Placement of the popover on the trigger.
     * @default 'top'
     */
    placement?: Placement;
    /**
     * When a boolean is provided, the popover will be controlled.
     * @default undefined
     */
    open?: boolean;
    /**
     * Change the background color of the popover.
     *
     * @default 'default'
     */
    variant?: "default" | "tinted";
    /**
     * Change the color scheme of the popover
     */
    'data-color'?: Color | SeverityColors;
    /**
     * Callback when the popover wants to open.
     */
    onOpen?: () => void;
    /**
     * Callback when the popover wants to close.
     */
    onClose?: () => void;
    /**
     * Whether to enable auto placement.
     * @default true
     */
    autoPlacement?: boolean;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Popover.d.ts.map