'use client';
'use strict';

var react$1 = require('@floating-ui/react');
var react = require('react');
var useDebounceCallback = require('../../../utilities/hooks/useDebounceCallback/useDebounceCallback.js');
var ComboboxContext = require('../ComboboxContext.js');
var ComboboxIdContext = require('../ComboboxIdContext.js');
var utilities = require('../utilities.js');

const useComboboxOption = ({ id, ref, value, }) => {
    const generatedId = react.useId();
    const newId = id || generatedId;
    const context = react.useContext(ComboboxContext.ComboboxContext);
    const { activeIndex } = ComboboxIdContext.useComboboxId();
    const dispatch = ComboboxIdContext.useComboboxIdDispatch();
    if (!context) {
        throw new Error('ComboboxOption must be used within a Combobox');
    }
    const { selectedOptions, onOptionClick, setListRef, customIds, filteredOptions, } = context;
    const index = react.useMemo(() => filteredOptions.indexOf(utilities.prefix(String(value))) + customIds.length, [customIds.length, filteredOptions, value]);
    const combinedRef = react$1.useMergeRefs([
        (node) => {
            setListRef(index, node);
        },
        ref,
    ]);
    if (index === -1) {
        throw new Error('Internal error: ComboboxOption did not find index');
    }
    const selected = selectedOptions[utilities.prefix(value)];
    const active = activeIndex === index;
    react.useEffect(() => {
        if (active) {
            dispatch?.({ type: 'SET_ACTIVE_INDEX', payload: index });
        }
    }, [generatedId, id, dispatch, active, index]);
    const onOptionClickDebounced = useDebounceCallback.useDebounceCallback(() => onOptionClick(value), 50);
    return {
        id: newId,
        ref: combinedRef,
        selected,
        active,
        onOptionClick: onOptionClickDebounced,
    };
};

exports.useComboboxOption = useComboboxOption;
