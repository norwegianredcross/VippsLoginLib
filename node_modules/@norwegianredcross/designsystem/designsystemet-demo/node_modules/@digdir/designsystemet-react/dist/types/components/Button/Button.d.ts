import type { Color, SeverityDanger } from '@digdir/designsystemet-react/colors';
import type { ButtonHTMLAttributes, ReactNode } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
export type ButtonProps = MergeRight<DefaultProps & ButtonHTMLAttributes<HTMLButtonElement>, {
    /**
     * Specify which variant to use
     * @default 'primary'
     */
    variant?: 'primary' | 'secondary' | 'tertiary';
    /**
     * Change the color scheme of the button
     */
    'data-color'?: Color | SeverityDanger;
    /**
     * Toggle icon only styling, pass icon as children
     * @default false
     */
    icon?: boolean;
    /**
     * Toggle loading state.
     * Pass an element if you want to display a custom loader.
     *
     * @default false
     */
    loading?: boolean | ReactNode;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
    /**
     * Specify the type of button. Unset when `asChild` is true
     * @default 'button'
     */
    type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];
}>;
/**
 * Button used for interaction
 *
 * @example
 * <Button>Click me</Button>
 */
export declare const Button: React.ForwardRefExoticComponent<Omit<DefaultProps & ButtonHTMLAttributes<HTMLButtonElement>, "type" | "data-color" | "variant" | "icon" | "loading" | "asChild"> & {
    /**
     * Specify which variant to use
     * @default 'primary'
     */
    variant?: "primary" | "secondary" | "tertiary";
    /**
     * Change the color scheme of the button
     */
    'data-color'?: Color | SeverityDanger;
    /**
     * Toggle icon only styling, pass icon as children
     * @default false
     */
    icon?: boolean;
    /**
     * Toggle loading state.
     * Pass an element if you want to display a custom loader.
     *
     * @default false
     */
    loading?: boolean | ReactNode;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
    /**
     * Specify the type of button. Unset when `asChild` is true
     * @default 'button'
     */
    type?: ButtonHTMLAttributes<HTMLButtonElement>["type"];
} & React.RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=Button.d.ts.map