'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactSlot = require('@radix-ui/react-slot');
var uDatalist = require('@u-elements/u-datalist');
var cl = require('clsx/lite');
var react = require('react');

const SuggestionContext = react.createContext({});
/**
 * A component that provides a suggestion list for an input field.
 *
 * @example
 * <Suggestion>
 *   <Suggestion.Input />
 *   <Suggestion.Clear />
 *   <Suggestion.List>
 *     <Suggestion.Empty>Tomt</Suggestion.Empty>
 *     <Suggestion.Option value='Option 1'>Option 1</Suggestion.Option>
 *     <Suggestion.Option value='Option 2'>Option 2</Suggestion.Option>
 *   </Suggestion.List>
 * </Suggestion>
 */
const Suggestion = react.forwardRef(function Suggestion({ className, filter = true, asChild, ...rest }, ref) {
    const Component = asChild ? reactSlot.Slot : 'div';
    const [listId, setListId] = react.useState(react.useId());
    const inputRef = react.useRef(null);
    const handleFilter = react.useCallback((input) => {
        const list = input?.list;
        // Let <datalist> handle filtering if filter is true
        if (filter === true || !list)
            return;
        console.log(list);
        // Handle custom filter
        if (filter !== false) {
            let index = 0;
            for (const option of list.getElementsByTagName('u-option')) {
                if (!option.hasAttribute('data-empty'))
                    option.disabled = !filter({
                        index: index++, // Increment index for each <option>
                        input,
                        optionElement: option,
                        text: option.text,
                        value: uDatalist.getDatalistValue(option),
                    });
            }
        }
        uDatalist.syncDatalistState(input); // Sync the datalist state if filter is custom or false
    }, [filter]);
    return (jsxRuntime.jsx(SuggestionContext.Provider, { value: { inputRef, listId, setListId, handleFilter }, children: jsxRuntime.jsx(Component, { className: cl('ds-suggestion', className), ref: ref, ...rest }) }));
});

exports.Suggestion = Suggestion;
exports.SuggestionContext = SuggestionContext;
