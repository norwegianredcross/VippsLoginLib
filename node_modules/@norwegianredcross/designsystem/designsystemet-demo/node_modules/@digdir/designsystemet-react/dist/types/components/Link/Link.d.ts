import type { AnchorHTMLAttributes, ReactNode } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
export type LinkProps = MergeRight<DefaultProps & AnchorHTMLAttributes<HTMLAnchorElement>, {
    /**
     * The content to display inside the link.
     **/
    children: ReactNode;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
}>;
/**
 * Link component, renders a native `a` element.
 *
 * @example
 * <Link href='#'>Link</Link>
 */
export declare const Link: React.ForwardRefExoticComponent<Omit<DefaultProps & AnchorHTMLAttributes<HTMLAnchorElement>, "children" | "asChild"> & {
    /**
     * The content to display inside the link.
     **/
    children: ReactNode;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & React.RefAttributes<HTMLAnchorElement>>;
//# sourceMappingURL=Link.d.ts.map