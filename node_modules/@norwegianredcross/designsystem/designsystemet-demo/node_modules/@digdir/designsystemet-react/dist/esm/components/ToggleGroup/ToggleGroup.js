'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import cl from 'clsx/lite';
import { forwardRef, useId, useState, createContext } from 'react';
import { RovingFocusRoot } from '../../utilities/RovingFocus/RovingFocusRoot.js';

const ToggleGroupContext = createContext({});
/**
 * Display a group of buttons that can be toggled between.
 *
 * @example
 * <ToggleGroup onChange={(value) => console.log(value)}>
 *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>
 *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>
 *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>
 * </ToggleGroup>
 */
const ToggleGroup = forwardRef(function ToggleGroup({ children, value, defaultValue, onChange, name, className, ...rest }, ref) {
    const nameId = useId();
    const isControlled = value !== undefined;
    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);
    let onValueChange = onChange;
    if (!isControlled) {
        onValueChange = (newValue) => {
            setUncontrolledValue(newValue);
            onChange?.(newValue);
        };
        value = uncontrolledValue;
    }
    return (jsx(ToggleGroupContext.Provider, { value: {
            value,
            defaultValue,
            name: name ?? `togglegroup-name-${nameId}`,
            onChange: onValueChange,
        }, children: jsx(RovingFocusRoot, { asChild: true, activeValue: value, orientation: 'ambiguous', children: jsxs("div", { className: cl('ds-togglegroup', className), role: 'radiogroup', ref: ref, ...rest, children: [name && jsx("input", { type: 'hidden', name: name, value: value }), children] }) }) }));
});

export { ToggleGroup, ToggleGroupContext };
