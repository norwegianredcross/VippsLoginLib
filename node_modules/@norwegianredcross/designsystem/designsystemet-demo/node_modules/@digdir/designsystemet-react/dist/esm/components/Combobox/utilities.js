'use client';
import { isValidElement } from 'react';
import { ComboboxCustom } from './Custom.js';

function isComboboxCustom(child) {
    return isValidElement(child) && child.type === ComboboxCustom;
}
function isInteractiveComboboxCustom(child) {
    return isComboboxCustom(child) && child.props.interactive === true;
}
const INTERNAL_OPTION_PREFIX = 'internal-option-';
/**
 * We use this function to prefix the value of the options so we can make sure numbers as strings are not parsed as numbers in objects
 * @param value
 * @returns
 */
const prefix = (value) => {
    return INTERNAL_OPTION_PREFIX + value;
};
const removePrefix = (value) => {
    return value.slice(INTERNAL_OPTION_PREFIX.length);
};
const setReactInputValue = (input, value) => {
    const previousValue = input.value;
    input.value = value;
    const tracker = input._valueTracker;
    if (typeof tracker !== 'undefined') {
        tracker.setValue(previousValue);
    }
    //'change' instead of 'input', see https://github.com/facebook/react/issues/11488#issuecomment-381590324
    input.dispatchEvent(new Event('change', { bubbles: true }));
};

export { isComboboxCustom, isInteractiveComboboxCustom, prefix, removePrefix, setReactInputValue };
