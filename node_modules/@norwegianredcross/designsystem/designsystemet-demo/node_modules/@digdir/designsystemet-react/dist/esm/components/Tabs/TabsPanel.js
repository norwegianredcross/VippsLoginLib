'use client';
import { jsx, Fragment } from 'react/jsx-runtime';
import { forwardRef, useContext, useState, useRef, useEffect } from 'react';
import { useMergeRefs } from '@floating-ui/react';
import { Context } from './Tabs.js';

/**
 * A single content item in a Tabs component.
 *
 * @example
 * <Tabs.Panel value='1'>content 1</Tabs.Panel>
 */
const TabsPanel = forwardRef(function TabsPanel({ children, value, ...rest }, ref) {
    const { value: tabsValue } = useContext(Context);
    const active = value === tabsValue;
    const [hasTabbableElement, setHasTabbableElement] = useState(false);
    const internalRef = useRef(null);
    const mergedRef = useMergeRefs([ref, internalRef]);
    /* Check if the panel has any tabbable elements */
    useEffect(() => {
        if (!internalRef.current)
            return;
        const tabbableElements = internalRef.current.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        setHasTabbableElement(tabbableElements.length > 0);
    }, [children]);
    return (jsx(Fragment, { children: active && (jsx("div", { ref: mergedRef, role: 'tabpanel', tabIndex: hasTabbableElement ? undefined : 0, ...rest, children: children })) }));
});

export { TabsPanel };
