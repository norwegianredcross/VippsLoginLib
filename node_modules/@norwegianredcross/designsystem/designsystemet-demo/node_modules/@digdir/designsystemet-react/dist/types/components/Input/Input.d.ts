import type { InputHTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
type InputAttr = InputHTMLAttributes<HTMLInputElement>;
export type InputProps = MergeRight<DefaultProps & Omit<InputAttr, 'prefix' | 'type'>, {
    /**
     * Supported `input` types
     *
     * @default 'text'
     * */
    type?: 'checkbox' | 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'hidden' | 'month' | 'number' | 'password' | 'radio' | 'search' | 'tel' | 'text' | 'time' | 'url' | 'week';
    /**
     * Defines the width of `Input` in count of characters.
     */
    size?: number;
    /**
     * Disables element
     * @note Avoid using if possible for accessibility purposes
     */
    disabled?: boolean;
    /**
     * Toggle `readOnly`
     **/
    readOnly?: boolean;
    /**
     * Set role, i.e. `switch` when `checkbox` or `radio`
     **/
    role?: InputAttr['role'];
}>;
/**
 * Input renders a native `input` element.
 *
 * @example
 * <Input />
 */
export declare const Input: React.ForwardRefExoticComponent<Omit<DefaultProps & Omit<InputAttr, "prefix" | "type">, "type" | "disabled" | "readOnly" | "size" | "role"> & {
    /**
     * Supported `input` types
     *
     * @default 'text'
     * */
    type?: "checkbox" | "color" | "date" | "datetime-local" | "email" | "file" | "hidden" | "month" | "number" | "password" | "radio" | "search" | "tel" | "text" | "time" | "url" | "week";
    /**
     * Defines the width of `Input` in count of characters.
     */
    size?: number;
    /**
     * Disables element
     * @note Avoid using if possible for accessibility purposes
     */
    disabled?: boolean;
    /**
     * Toggle `readOnly`
     **/
    readOnly?: boolean;
    /**
     * Set role, i.e. `switch` when `checkbox` or `radio`
     **/
    role?: InputAttr["role"];
} & React.RefAttributes<HTMLInputElement>>;
export {};
//# sourceMappingURL=Input.d.ts.map