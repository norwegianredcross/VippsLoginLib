'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react$1 = require('@floating-ui/react');
var reactSlot = require('@radix-ui/react-slot');
var cl = require('clsx/lite');
var react = require('react');
var ComboboxContext = require('./ComboboxContext.js');
var ComboboxIdContext = require('./ComboboxIdContext.js');
var Label = require('../Label/Label.js');
var omit = require('../../utilities/omit/omit.js');

const ComboboxCustom = react.forwardRef(({ asChild, interactive, id, className, ...rest }, ref) => {
    if (interactive && !id) {
        throw new Error('If ComboboxCustom is interactive, it must have an id');
    }
    const Component = asChild ? reactSlot.Slot : 'div';
    const randomId = react.useId();
    const { activeIndex } = ComboboxIdContext.useComboboxId();
    const context = react.useContext(ComboboxContext.ComboboxContext);
    if (!context) {
        throw new Error('ComboboxCustom must be used within a Combobox');
    }
    const { customIds, setListRef, getItemProps, size } = context;
    const index = react.useMemo(() => (id && customIds.indexOf(id)) || 0, [id, customIds]);
    const combinedRef = react$1.useMergeRefs([
        (node) => {
            setListRef(index, node);
        },
        ref,
    ]);
    return (jsxRuntime.jsx(Label.Label, { "data-size": size, asChild: true, children: jsxRuntime.jsx(Component, { ref: combinedRef, tabIndex: -1, className: cl('ds-combobox__custom', className), id: id || randomId, role: 'option', "aria-selected": activeIndex === index, "data-active": activeIndex === index, ...omit.omit(['interactive'], rest), ...omit.omit(['onClick', 'onPointerLeave'], getItemProps()) }) }));
});

exports.ComboboxCustom = ComboboxCustom;
