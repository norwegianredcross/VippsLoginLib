import type { HTMLAttributes, OlHTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
type ListBaseProps = {
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & DefaultProps;
export type ListUnorderedProps = ListBaseProps & Omit<HTMLAttributes<HTMLUListElement>, 'size'>;
export type ListOrderedProps = ListBaseProps & Omit<OlHTMLAttributes<HTMLOListElement>, 'size'>;
/**
 * ListUnordered component, used to display a list of items.
 * Renders a native `ul` element.
 *
 * @example
 * <List.Unordered>
 *   <List.Item>Item 1</List.Item>
 *   <List.Item>Item 2</List.Item>
 * </List.Unordered>
 */
export declare const ListUnordered: React.ForwardRefExoticComponent<{
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & DefaultProps & Omit<HTMLAttributes<HTMLUListElement>, "size"> & React.RefAttributes<HTMLUListElement>>;
/**
 * ListOrdered component, used to display a list of items.
 * Renders a native `ol` element.
 *
 * @example
 * <List.Ordered>
 *   <List.Item>Item 1</List.Item>
 *   <List.Item>Item 2</List.Item>
 * </List.Ordered>
 */
export declare const ListOrdered: React.ForwardRefExoticComponent<{
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & DefaultProps & Omit<OlHTMLAttributes<HTMLOListElement>, "size"> & React.RefAttributes<HTMLOListElement>>;
export {};
//# sourceMappingURL=Lists.d.ts.map