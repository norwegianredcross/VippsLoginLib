import { type HTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import { type ButtonProps } from '../Button/Button';
export type PopoverTriggerProps = ({
    /**
     * Will render the trigger as inline text.
     * @default false
     */
    inline?: true;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & HTMLAttributes<HTMLButtonElement> & DefaultProps) | ({
    /**
     * Will render the trigger as inline text.
     * @default false
     */
    inline?: false;
} & ButtonProps);
/**
 * PopoverTrigger component, used to trigger a popover.
 *
 * @example
 * <Popover.TriggerContext>
 *   <Popover.Trigger>Open Popover</Popover.Trigger>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 *
 * @example inline
 * <Popover.TriggerContext>
 *   <Paragraph>
 *    We can use it <Popover.Trigger inline={true}>inline</Popover.Trigger>.
 *   </Paragraph>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 */
export declare const PopoverTrigger: React.ForwardRefExoticComponent<PopoverTriggerProps & React.RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=PopoverTrigger.d.ts.map