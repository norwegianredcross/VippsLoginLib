import type { HTMLAttributes, ReactNode } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
export type CardProps = MergeRight<DefaultProps & HTMLAttributes<HTMLDivElement>, {
    /**
     * Change the background color of the card.
     *
     * @default 'default'
     */
    variant?: 'default' | 'tinted';
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
    /** Instances of `Card.Block`, `Divider` or other React nodes */
    children: ReactNode;
}>;
/**
 * Card component to present content in a structured way.
 *
 * @example
 * <Card>
 *  <Card.Block>Header</Card.Block>
 *  <Card.Block>Content</Card.Block>
 *  <Card.Block>Footer</Card.Block>
 * </Card>
 */
export declare const Card: React.ForwardRefExoticComponent<Omit<DefaultProps & HTMLAttributes<HTMLDivElement>, "children" | "variant" | "asChild"> & {
    /**
     * Change the background color of the card.
     *
     * @default 'default'
     */
    variant?: "default" | "tinted";
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
    /** Instances of `Card.Block`, `Divider` or other React nodes */
    children: ReactNode;
} & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Card.d.ts.map