'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react$1 = require('@floating-ui/react');
var reactSlot = require('@radix-ui/react-slot');
var react = require('react');

const RovingFocusContext = react.createContext({
    elements: { current: new Map() },
    getOrderedItems: () => [],
    setFocusableValue: () => {
        /* intentionally empty */
    },
    onShiftTab: () => {
        /* intentionally empty */
    },
    focusableValue: null,
    orientation: 'horizontal',
});
const RovingFocusRoot = react.forwardRef(({ activeValue, asChild, orientation = 'horizontal', onBlur, onFocus, ...rest }, ref) => {
    const Component = asChild ? reactSlot.Slot : 'div';
    const [focusableValue, setFocusableValue] = react.useState(null);
    const [isShiftTabbing, setIsShiftTabbing] = react.useState(false);
    const elements = react.useRef(new Map());
    const myRef = react.useRef(null);
    const refs = react$1.useMergeRefs([ref, myRef]);
    const getOrderedItems = () => {
        if (!myRef.current)
            return [];
        const elementsFromDOM = Array.from(myRef.current.querySelectorAll('[data-roving-tabindex-item]'));
        return Array.from(elements.current)
            .sort((a, b) => elementsFromDOM.indexOf(a[1]) - elementsFromDOM.indexOf(b[1]))
            .map(([value, element]) => ({ value, element }));
    };
    react.useEffect(() => {
        setFocusableValue(activeValue ?? null);
    }, [activeValue]);
    return (jsxRuntime.jsx(RovingFocusContext.Provider, { value: {
            elements,
            getOrderedItems,
            focusableValue,
            setFocusableValue,
            onShiftTab: () => {
                setIsShiftTabbing(true);
            },
            orientation,
        }, children: jsxRuntime.jsx(Component, { ...rest, tabIndex: isShiftTabbing ? -1 : 0, onBlur: (e) => {
                onBlur?.(e);
                setIsShiftTabbing(false);
                setFocusableValue(activeValue ?? null);
            }, onFocus: (e) => {
                onFocus?.(e);
                if (e.target !== e.currentTarget)
                    return;
                const orderedItems = getOrderedItems();
                if (orderedItems.length === 0)
                    return;
                if (focusableValue != null) {
                    elements.current.get(focusableValue)?.focus();
                }
                else if (activeValue != null) {
                    elements.current.get(activeValue)?.focus();
                }
                else {
                    orderedItems.at(0)?.element.focus();
                }
            }, ref: refs }) }));
});

exports.RovingFocusContext = RovingFocusContext;
exports.RovingFocusRoot = RovingFocusRoot;
