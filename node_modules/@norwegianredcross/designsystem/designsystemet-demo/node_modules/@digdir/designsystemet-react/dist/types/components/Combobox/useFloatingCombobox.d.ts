import type { MutableRefObject } from 'react';
type UseFloatingComboboxProps = {
    listRef: MutableRefObject<(HTMLElement | null)[]>;
};
export declare const useFloatingCombobox: ({ listRef }: UseFloatingComboboxProps) => {
    open: boolean;
    setOpen: React.Dispatch<React.SetStateAction<boolean>>;
    activeIndex: number;
    refs: {
        reference: MutableRefObject<import("@floating-ui/react-dom").ReferenceType | null>;
        floating: React.MutableRefObject<HTMLElement | null>;
        setReference: (node: import("@floating-ui/react-dom").ReferenceType | null) => void;
        setFloating: (node: HTMLElement | null) => void;
    } & import("@floating-ui/react").ExtendedRefs<HTMLInputElement>;
    floatingStyles: React.CSSProperties;
    context: {
        x: number;
        y: number;
        placement: import("@floating-ui/utils").Placement;
        strategy: import("@floating-ui/utils").Strategy;
        middlewareData: import("@floating-ui/core").MiddlewareData;
        isPositioned: boolean;
        update: () => void;
        floatingStyles: React.CSSProperties;
        open: boolean;
        onOpenChange: (open: boolean, event?: Event, reason?: import("@floating-ui/react").OpenChangeReason) => void;
        events: import("@floating-ui/react").FloatingEvents;
        dataRef: React.MutableRefObject<import("@floating-ui/react").ContextData>;
        nodeId: string | undefined;
        floatingId: string;
        refs: import("@floating-ui/react").ExtendedRefs<HTMLInputElement>;
        elements: import("@floating-ui/react").ExtendedElements<HTMLInputElement>;
    };
    getReferenceProps: (userProps?: React.HTMLProps<Element>) => Record<string, unknown>;
    getFloatingProps: (userProps?: React.HTMLProps<HTMLElement>) => Record<string, unknown>;
    getItemProps: (userProps?: Omit<React.HTMLProps<HTMLElement>, "selected" | "active"> & {
        active?: boolean;
        selected?: boolean;
    }) => Record<string, unknown>;
};
export {};
//# sourceMappingURL=useFloatingCombobox.d.ts.map