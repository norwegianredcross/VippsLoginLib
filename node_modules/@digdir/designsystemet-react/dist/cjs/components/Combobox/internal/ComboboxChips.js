'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
require('../../Chip/index.js');
var ComboboxContext = require('../ComboboxContext.js');
var Chips = require('../../Chip/Chips.js');

const ComboboxChips = () => {
    const context = react.useContext(ComboboxContext.ComboboxContext);
    if (!context) {
        throw new Error('ComboboxContext is missing');
    }
    const { size, readOnly, disabled, selectedOptions, chipSrLabel, handleSelectOption, inputRef, } = context;
    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: Object.keys(selectedOptions).map((value) => {
            return (jsxRuntime.jsx(Chips.ChipRemovable, { "data-size": size, disabled: disabled, onKeyDown: (e) => {
                    if (readOnly)
                        return;
                    if (disabled)
                        return;
                    if (e.key === 'Enter') {
                        e.stopPropagation();
                        handleSelectOption({
                            option: selectedOptions[value],
                            remove: true,
                        });
                        inputRef?.current?.focus();
                    }
                }, onClick: () => {
                    if (readOnly)
                        return;
                    if (disabled)
                        return;
                    /* If we click a chip, filter the active values and remove the one we clicked */
                    handleSelectOption({
                        option: selectedOptions[value],
                        remove: true,
                    });
                }, "aria-label": chipSrLabel(selectedOptions[value]), children: selectedOptions[value].label }, value));
        }) }));
};
ComboboxChips.displayName = 'ComboboxChips';

module.exports = ComboboxChips;
