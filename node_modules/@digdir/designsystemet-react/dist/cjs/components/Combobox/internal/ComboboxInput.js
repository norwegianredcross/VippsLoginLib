'use client';
'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react$1 = require('@floating-ui/react');
var akselIcons = require('@navikt/aksel-icons');
var cl = require('clsx/lite');
var react = require('react');
var ComboboxContext = require('../ComboboxContext.js');
var ComboboxIdContext = require('../ComboboxIdContext.js');
var utilities = require('../utilities.js');
var ComboboxChips = require('./ComboboxChips.js');
var ComboboxClearButton = require('./ComboboxClearButton.js');
var Paragraph = require('../../Paragraph/Paragraph.js');
var omit = require('../../../utilities/omit/omit.js');

const ComboboxInput = ({ hideClearButton, listId, error, hideChips, handleKeyDown, ...rest }) => {
    const context = react.useContext(ComboboxContext.ComboboxContext);
    const idDispatch = ComboboxIdContext.useComboboxIdDispatch();
    const clearButtonRef = react.useRef(null);
    if (!context) {
        throw new Error('ComboboxContext is missing');
    }
    const setActiveIndex = (id) => {
        idDispatch?.({ type: 'SET_ACTIVE_INDEX', payload: id });
    };
    const { forwareddRef, readOnly, disabled, open, inputRef, refs, inputValue, multiple, selectedOptions, formFieldProps, htmlSize, options, setOpen, getReferenceProps, setInputValue, handleSelectOption, size, } = context;
    const mergedRefs = react$1.useMergeRefs([forwareddRef, inputRef]);
    // onChange function for the input
    const onChange = (event) => {
        const value = event.target.value;
        setInputValue(value);
        setActiveIndex(0);
        // check if input value is the same as a label, if so, select it
        for (const option of Object.values(options)) {
            if (option.label.toLowerCase() === value.toLowerCase()) {
                /* if option is already selected, discard selecting it, since it would de-select */
                if (selectedOptions[utilities.prefix(option.value)])
                    continue;
                handleSelectOption({ option });
            }
        }
    };
    const showClearButton = !hideClearButton && Object.keys(selectedOptions).length > 0;
    /* Props from floating-ui */
    const props = getReferenceProps({
        ref: refs?.setReference,
        role: null,
        'aria-controls': null,
        'aria-expanded': null,
        'aria-haspopup': null,
        /* If we click the wrapper, toggle open, set index to first option, and focus the input */
        onClick(event) {
            if (disabled)
                return;
            if (readOnly)
                return;
            if (clearButtonRef.current?.contains(event.target))
                return;
            setOpen(!open);
            setActiveIndex(0);
            inputRef.current?.focus();
        },
        /* Handles list navigation */
        onKeyDown: handleKeyDown,
        // preventDefault on keydown to avoid sending in form
        onKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        },
    });
    return (jsxRuntime.jsx(Paragraph.Paragraph, { "data-size": size, asChild: true, children: jsxRuntime.jsxs("div", { ...props, "aria-disabled": disabled ? 'true' : undefined, className: cl('ds-textfield__input', 'ds-combobox__input__wrapper', readOnly && 'ds-combobox--readonly', error && 'ds-combobox--error'), children: [jsxRuntime.jsxs("div", { className: 'ds-combobox__chip-and-input', children: [multiple && !hideChips && jsxRuntime.jsx(ComboboxChips, {}), jsxRuntime.jsx(Paragraph.Paragraph, { "data-size": size, asChild: true, children: jsxRuntime.jsx("input", { ref: mergedRefs, "aria-activedescendant": props['aria-activedescendant'], readOnly: readOnly, "aria-autocomplete": 'list', role: 'combobox', "aria-expanded": open, "aria-controls": open ? listId : undefined, autoComplete: 'off', size: htmlSize, value: inputValue, ...omit.omit(['style', 'className'], rest), ...formFieldProps.inputProps, className: 'ds-combobox__input', onChange: (e) => {
                                    onChange(e);
                                    !open && setOpen(true);
                                    rest.onChange?.(e);
                                } }) })] }), showClearButton && jsxRuntime.jsx(ComboboxClearButton, { ref: clearButtonRef }), jsxRuntime.jsx("div", { className: 'ds-combobox__arrow', children: open ? (jsxRuntime.jsx(akselIcons.ChevronUpIcon, { title: 'arrow up', fontSize: '1.5em' })) : (jsxRuntime.jsx(akselIcons.ChevronDownIcon, { title: 'arrow down', fontSize: '1.5em' })) })] }) }));
};
ComboboxInput.displayName = 'ComboboxInput';

module.exports = ComboboxInput;
