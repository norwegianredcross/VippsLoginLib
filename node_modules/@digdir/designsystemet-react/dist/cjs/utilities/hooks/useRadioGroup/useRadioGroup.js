'use client';
'use strict';

var react = require('react');

/**
 * useRadioGroup is used to group multiple <Radio> components
 * @example
 * const { getRadioProps, validationMessageProps, value, setValue } = useRadioGroup({
 *   disabled: false,
 *   error: 'Validation message text',
 *   name: 'group-name',
 *   onChange: (nextValue, prevValue) => {},
 *   readOnly: false,
 *   required: true,
 *   value: '',
 * });
 */
function useRadioGroup({ error, readOnly, required, disabled, name, onChange, value: initalValue = '', } = {}) {
    const [groupValue, setGroupValue] = react.useState(initalValue);
    const errorId = react.useId();
    const namedId = react.useId();
    const radioGroupName = name || namedId;
    return {
        /**
         * Current value of the group.
         */
        value: groupValue,
        /**
         * Set the value of the group.
         *
         * @param value string[]
         * @returns void
         */
        setValue: setGroupValue,
        /**
         * Props to send to the `Radio` component.
         * @example
         * <Radio label="Option 1" {...getRadioProps('option-1')} />
         */
        getRadioProps: (propsOrValue) => {
            const props = typeof propsOrValue === 'string'
                ? { value: propsOrValue }
                : propsOrValue;
            const { ref: forwardedRef = undefined, value = '', ...rest } = props;
            const handleRef = (element) => {
                if (element) {
                    // Set initial checked state
                    element.checked = value === groupValue;
                }
                // Handle forwarded ref
                if (forwardedRef) {
                    if (typeof forwardedRef === 'function') {
                        forwardedRef(element);
                    }
                    else {
                        forwardedRef.current = element;
                    }
                }
            };
            const handleChange = (e) => {
                if (e.target.name === radioGroupName) {
                    setGroupValue((prevValue) => {
                        onChange?.(e.target.value, prevValue);
                        return e.target.value;
                    });
                }
            };
            return {
                ...rest,
                name: radioGroupName,
                'aria-describedby': `${error ? errorId : ''} ${rest['aria-describedby'] || ''}`.trim() ||
                    undefined,
                'aria-invalid': !!error || rest['aria-invalid'],
                value,
                ref: handleRef,
                required: required || rest.required,
                readOnly: readOnly || rest.readOnly,
                disabled: disabled || rest.disabled,
                onChange: (e) => {
                    rest.onChange?.(e);
                    if (e.defaultPrevented)
                        return;
                    handleChange(e);
                },
            };
        },
        /**
         * Props to send to the `ValidationMessage` component.
         *
         * @example
         * <ValidationMessage {...validationMessageProps} />
         */
        validationMessageProps: {
            children: error,
            hidden: !error,
            id: errorId,
        },
    };
}

exports.useRadioGroup = useRadioGroup;
