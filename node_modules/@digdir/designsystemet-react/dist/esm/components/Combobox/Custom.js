'use client';
import { jsx } from 'react/jsx-runtime';
import { useMergeRefs } from '@floating-ui/react';
import { Slot } from '@radix-ui/react-slot';
import cl from 'clsx/lite';
import { forwardRef, useId, useContext, useMemo } from 'react';
import { ComboboxContext } from './ComboboxContext.js';
import { useComboboxId } from './ComboboxIdContext.js';
import { Label } from '../Label/Label.js';
import { omit } from '../../utilities/omit/omit.js';

const ComboboxCustom = forwardRef(({ asChild, interactive, id, className, ...rest }, ref) => {
    if (interactive && !id) {
        throw new Error('If ComboboxCustom is interactive, it must have an id');
    }
    const Component = asChild ? Slot : 'div';
    const randomId = useId();
    const { activeIndex } = useComboboxId();
    const context = useContext(ComboboxContext);
    if (!context) {
        throw new Error('ComboboxCustom must be used within a Combobox');
    }
    const { customIds, setListRef, getItemProps, size } = context;
    const index = useMemo(() => (id && customIds.indexOf(id)) || 0, [id, customIds]);
    const combinedRef = useMergeRefs([
        (node) => {
            setListRef(index, node);
        },
        ref,
    ]);
    return (jsx(Label, { "data-size": size, asChild: true, children: jsx(Component, { ref: combinedRef, tabIndex: -1, className: cl('ds-combobox__custom', className), id: id || randomId, role: 'option', "aria-selected": activeIndex === index, "data-active": activeIndex === index, ...omit(['interactive'], rest), ...omit(['onClick', 'onPointerLeave'], getItemProps()) }) }));
});

export { ComboboxCustom };
