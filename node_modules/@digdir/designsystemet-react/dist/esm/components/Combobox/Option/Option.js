'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import cl from 'clsx/lite';
import { memo, forwardRef, useId, useContext, isValidElement } from 'react';
import { omit } from '../../../utilities/omit/omit.js';
import { ComboboxContext } from '../ComboboxContext.js';
import ComboboxOptionDescription from './Description.js';
import { SelectedIcon } from './SelectedIcon.js';
import { useComboboxOption } from './useComboboxOption.js';
import { Label } from '../../Label/Label.js';

const ComboboxOption = memo(forwardRef(({ value, description, children, className, ...rest }, forwardedRef) => {
    const labelId = useId();
    const { id, ref, selected, active, onOptionClick } = useComboboxOption({
        id: rest.id,
        ref: forwardedRef,
        value,
    });
    const context = useContext(ComboboxContext);
    if (!context) {
        throw new Error('ComboboxOption must be used within a Combobox');
    }
    const { size, multiple, getItemProps } = context;
    const props = getItemProps();
    return (jsx(Label, { "data-size": 'md', asChild: true, children: jsxs("button", { ref: ref, id: id, 
            // biome-ignore lint/a11y/useSemanticElements: biome wants me to use the <option> element
            role: 'option', type: 'button', "aria-selected": !!selected, "aria-labelledby": labelId, tabIndex: -1, onClick: (e) => {
                onOptionClick();
                rest.onClick?.(e);
            }, className: cl('ds-combobox__option', active && 'ds-combobox__option--active', multiple && 'ds-combobox__option--multiple', className), ...omit(['displayValue'], rest), ...omit(['onClick', 'onPointerLeave'], props), children: [jsx(Label, { asChild: true, "data-size": size, children: jsx("span", { children: jsx(SelectedIcon, { multiple: multiple, selected: !!selected }) }) }), jsxs(Label, { className: 'ds-combobox__option__label', "data-size": size, id: labelId, children: [children, description && (jsx(ComboboxOptionDescription, { children: description }))] })] }) }));
}));
ComboboxOption.displayName = 'ComboboxOption';
function isComboboxOption(child) {
    return isValidElement(child) && child.type === ComboboxOption;
}

export { ComboboxOption, isComboboxOption };
