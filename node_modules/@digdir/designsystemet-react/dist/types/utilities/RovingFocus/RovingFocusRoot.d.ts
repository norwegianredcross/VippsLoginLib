import type { HTMLAttributes, MutableRefObject, ReactNode } from 'react';
export type RovingFocusElement = {
    value: string;
    element: HTMLElement;
};
export type RovingFocusProps = {
    elements: MutableRefObject<Map<string, HTMLElement>>;
    getOrderedItems: () => RovingFocusElement[];
    setFocusableValue: (value: string) => void;
    focusableValue: string | null;
    onShiftTab: () => void;
    orientation: 'vertical' | 'horizontal' | 'ambiguous';
};
export declare const RovingFocusContext: React.Context<RovingFocusProps>;
export declare const RovingFocusRoot: React.ForwardRefExoticComponent<{
    /** The children of the `RovingFocusRoot`. The children should get their roving-relevant props from the `useRovingFocus` hook. */
    children: ReactNode;
    /** The value of the element that should be focused when the `RovingFocusRoot` receives focus. */
    activeValue?: string;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
    /**
     * Changes what arrow keys are used to navigate the roving focus.
     * Sets correct `aria-orientation` attribute, if `vertical` or `horizontal`.
     *
     * @default 'horizontal'
     */
    orientation?: "vertical" | "horizontal" | "ambiguous";
} & HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement>>;
//# sourceMappingURL=RovingFocusRoot.d.ts.map