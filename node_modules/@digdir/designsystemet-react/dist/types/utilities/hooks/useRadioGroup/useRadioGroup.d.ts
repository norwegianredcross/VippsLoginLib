import type { ReactNode } from 'react';
import type { RadioProps } from '../../../components';
export type UseRadioGroupProps = {
    /** Set disabled state of all radios */
    disabled?: boolean;
    /** Shared error message for all radios */
    error?: ReactNode;
    /** Name of all radios.
     * @default string of auto-generated name
     */
    name?: string;
    /** Set read only state of all radios */
    readOnly?: boolean;
    /** Set required state of all radios */
    required?: boolean;
    /**
     * Initial value of the group
     */
    value?: string;
    /** Callback when selected radios changes */
    onChange?: (nextValue: string, prevValue: string) => void;
};
/**
 * Get anything that is set on a radio, but
 * remove anything that comes from the group itself.
 */
export type GetRadioProps = Omit<RadioProps, 'prefix' | 'role' | 'type' | 'size' | 'aria-label' | 'aria-labelledby' | 'label' | 'name' | 'checked' | 'value'> & {
    ref?: React.ForwardedRef<HTMLInputElement>;
    value?: string;
};
type useRadioGroupReturn = {
    value: string;
    setValue: React.Dispatch<React.SetStateAction<string>>;
    getRadioProps: (propsOrValue: string | GetRadioProps) => GetRadioProps;
    validationMessageProps: {
        children: ReactNode;
        hidden: boolean;
        id: string;
    };
};
/**
 * useRadioGroup is used to group multiple <Radio> components
 * @example
 * const { getRadioProps, validationMessageProps, value, setValue } = useRadioGroup({
 *   disabled: false,
 *   error: 'Validation message text',
 *   name: 'group-name',
 *   onChange: (nextValue, prevValue) => {},
 *   readOnly: false,
 *   required: true,
 *   value: '',
 * });
 */
export declare function useRadioGroup({ error, readOnly, required, disabled, name, onChange, value: initalValue, }?: UseRadioGroupProps): useRadioGroupReturn;
export {};
//# sourceMappingURL=useRadioGroup.d.ts.map