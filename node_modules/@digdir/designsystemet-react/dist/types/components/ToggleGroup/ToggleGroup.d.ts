import type { HTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
export type ToggleGroupContextProps = {
    value?: string;
    defaultValue?: string;
    onChange?: (value: string) => void;
    name?: string;
};
export declare const ToggleGroupContext: React.Context<ToggleGroupContextProps>;
export type ToggleGroupProps = MergeRight<DefaultProps & Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'onChange'>, {
    /**
     * Controlled state for `ToggleGroup` component.
     */
    value?: string;
    /**
     * Default value.
     */
    defaultValue?: string;
    /**
     * Callback with selected `ToggleGroupItem` `value`
     */
    onChange?: (value: string) => void;
    /**
     * Form element name
     */
    name?: string;
}>;
/**
 * Display a group of buttons that can be toggled between.
 *
 * @example
 * <ToggleGroup onChange={(value) => console.log(value)}>
 *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>
 *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>
 *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>
 * </ToggleGroup>
 */
export declare const ToggleGroup: React.ForwardRefExoticComponent<Omit<DefaultProps & Omit<HTMLAttributes<HTMLDivElement>, "value" | "onChange">, "name" | "value" | "onChange" | "defaultValue"> & {
    /**
     * Controlled state for `ToggleGroup` component.
     */
    value?: string;
    /**
     * Default value.
     */
    defaultValue?: string;
    /**
     * Callback with selected `ToggleGroupItem` `value`
     */
    onChange?: (value: string) => void;
    /**
     * Form element name
     */
    name?: string;
} & React.RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=ToggleGroup.d.ts.map