import { type HTMLAttributes, type RefObject } from 'react';
import '@u-elements/u-tags';
import type { UHTMLTagsElement } from '@u-elements/u-tags';
type MultiSuggestionContextType = {
    selectedItems?: {
        [key: string]: HTMLDataElement;
    };
    listId?: string;
    inputRef?: RefObject<HTMLInputElement | null>;
    setListId?: (id: string) => void;
    handleFilter?: (input?: HTMLInputElement | null) => void;
};
export declare const MultiSuggestionContext: React.Context<MultiSuggestionContextType>;
export type MultiSuggestionProps = {
    /**
     * Filter options, either true, false or a custom callback () => boolean
     *
     * If true, the <datalist> will handle filtering.
     * If false, the <datalist> will not handle filtering.
     * If a custom callback, the callback will be used to filter the <option> elements.
     *
     * @default true
     */
    filter?: boolean | ((args: {
        /**
         * Index of the `option`
         */
        index: number;
        /**
         * Text content of the `option`
         */
        text: string;
        /**
         * Value of the `option`
         */
        value: string;
        /**
         * The DOM element of the `option`
         */
        optionElement: HTMLOptionElement;
        /**
         * The DOM element of the `input`
         */
        input: HTMLInputElement;
    }) => boolean);
    /**
     * Allows the user to create new items
     *
     * @default false
     */
    allowCreate?: boolean;
    /**
     * The selected items of the multi-select.
     * Using this makes the component controlled and it must be used in combination with onValueChange
     */
    value?: string[];
    /**
     * Default selected items when uncontrolled
     */
    defaultValue?: string[];
    /**
     * Callback when selected items changes
     */
    onValueChange?: (value: string[]) => void;
    /**
     * The name of the associated form control
     *
     * @default undefined
     */
    name?: string;
} & HTMLAttributes<UHTMLTagsElement>;
export declare const MultiSuggestion: React.ForwardRefExoticComponent<{
    /**
     * Filter options, either true, false or a custom callback () => boolean
     *
     * If true, the <datalist> will handle filtering.
     * If false, the <datalist> will not handle filtering.
     * If a custom callback, the callback will be used to filter the <option> elements.
     *
     * @default true
     */
    filter?: boolean | ((args: {
        /**
         * Index of the `option`
         */
        index: number;
        /**
         * Text content of the `option`
         */
        text: string;
        /**
         * Value of the `option`
         */
        value: string;
        /**
         * The DOM element of the `option`
         */
        optionElement: HTMLOptionElement;
        /**
         * The DOM element of the `input`
         */
        input: HTMLInputElement;
    }) => boolean);
    /**
     * Allows the user to create new items
     *
     * @default false
     */
    allowCreate?: boolean;
    /**
     * The selected items of the multi-select.
     * Using this makes the component controlled and it must be used in combination with onValueChange
     */
    value?: string[];
    /**
     * Default selected items when uncontrolled
     */
    defaultValue?: string[];
    /**
     * Callback when selected items changes
     */
    onValueChange?: (value: string[]) => void;
    /**
     * The name of the associated form control
     *
     * @default undefined
     */
    name?: string;
} & HTMLAttributes<UHTMLTagsElement> & React.RefAttributes<UHTMLTagsElement>>;
export {};
//# sourceMappingURL=MultiSuggestion.d.ts.map