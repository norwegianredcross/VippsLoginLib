import { MultiSuggestionChips } from './MultiSuggestionChips';
import { MultiSuggestionClear } from './MultiSuggestionClear';
import { MultiSuggestionEmpty } from './MultiSuggestionEmpty';
import { MultiSuggestionInput } from './MultiSuggestionInput';
import { MultiSuggestionList } from './MultiSuggestionList';
import { MultiSuggestionOption } from './MultiSuggestionOption';
declare const MultiSuggestion: React.ForwardRefExoticComponent<{
    filter?: boolean | ((args: {
        index: number;
        text: string;
        value: string;
        optionElement: HTMLOptionElement;
        input: HTMLInputElement;
    }) => boolean);
    allowCreate?: boolean;
    value?: string[];
    defaultValue?: string[];
    onValueChange?: (value: string[]) => void;
    name?: string;
} & React.HTMLAttributes<import("@u-elements/u-tags").UHTMLTagsElement> & React.RefAttributes<import("@u-elements/u-tags").UHTMLTagsElement>> & {
    Input: React.ForwardRefExoticComponent<Omit<import("../../types").DefaultProps & Omit<React.InputHTMLAttributes<HTMLInputElement>, "prefix" | "type">, "type" | "disabled" | "readOnly" | "size" | "role"> & {
        type?: "checkbox" | "color" | "date" | "datetime-local" | "email" | "file" | "hidden" | "month" | "number" | "password" | "radio" | "search" | "tel" | "text" | "time" | "url" | "week";
        size?: number;
        disabled?: boolean;
        readOnly?: boolean;
        role?: React.AriaRole | undefined;
    } & React.RefAttributes<HTMLInputElement>>;
    List: React.ForwardRefExoticComponent<Omit<import("../../types").DefaultProps & React.HTMLAttributes<HTMLDataListElement>, "singular" | "plural"> & {
        singular?: string;
        plural?: string;
    } & React.RefAttributes<HTMLDataListElement>>;
    Option: React.ForwardRefExoticComponent<React.OptionHTMLAttributes<HTMLOptionElement> & import("../../types").DefaultProps & React.RefAttributes<HTMLOptionElement>>;
    Chips: {
        ({ render, }: import("./MultiSuggestionChips").MultiSuggestionChipsProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Empty: React.ForwardRefExoticComponent<import("../../types").DefaultProps & React.OptionHTMLAttributes<HTMLOptionElement> & React.RefAttributes<HTMLOptionElement>>;
    Clear: React.ForwardRefExoticComponent<Omit<import("..").ButtonProps, "children" | "variant"> & {
        'aria-label'?: string;
    } & React.RefAttributes<HTMLButtonElement>>;
};
export { MultiSuggestion as EXPERIMENTAL_MultiSuggestion, MultiSuggestionInput as EXPERIMENTAL_MultiSuggestionInput, MultiSuggestionList as EXPERIMENTAL_MultiSuggestionList, MultiSuggestionOption as EXPERIMENTAL_MultiSuggestionOption, MultiSuggestionChips as EXPERIMENTAL_MultiSuggestionChips, MultiSuggestionEmpty as EXPERIMENTAL_MultiSuggestionEmpty, MultiSuggestionClear as EXPERIMENTAL_MultiSuggestionClear, };
export type { MultiSuggestionProps } from './MultiSuggestion';
export type { MultiSuggestionInputProps } from './MultiSuggestionInput';
export type { MultiSuggestionListProps } from './MultiSuggestionList';
export type { MultiSuggestionOptionProps } from './MultiSuggestionOption';
export type { MultiSuggestionChipsProps } from './MultiSuggestionChips';
export type { MultiSuggestionEmptyProps } from './MultiSuggestionEmpty';
export type { MultiSuggestionClearProps } from './MultiSuggestionClear';
//# sourceMappingURL=index.d.ts.map