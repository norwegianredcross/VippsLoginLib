import { DialogBlock } from './DialogBlock';
import { DialogTrigger } from './DialogTrigger';
import { DialogTriggerContext } from './DialogTriggerContext';
/**
 * Dialog component, used to display a Dialog dialog.
 *
 * @example
 * <Dialog.TriggerContext>
 *   <Dialog.Trigger>Open Dialog</Dialog.Trigger>
 *   <Dialog>
 *     <Dialog.Block>
 *       Content
 *     </Dialog.Block>
 *   </Dialog>
 * </Dialog.TriggerContext>
 */
declare const Dialog: React.ForwardRefExoticComponent<Omit<import("../../types").DefaultProps & React.DialogHTMLAttributes<HTMLDialogElement>, "asChild" | "open" | "onClose" | "closeButton" | "closedby" | "modal"> & {
    closeButton?: string | false;
    closedby?: "none" | "closerequest" | "any";
    modal?: boolean;
    open?: boolean;
    onClose?: (event: Event) => void;
    asChild?: boolean;
} & React.RefAttributes<HTMLDialogElement>> & {
    Block: React.ForwardRefExoticComponent<{
        asChild?: boolean;
    } & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;
    TriggerContext: {
        ({ children, }: import("./DialogTriggerContext").DialogTriggerContextProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Trigger: React.ForwardRefExoticComponent<Omit<Omit<import("../../types").DefaultProps & React.ButtonHTMLAttributes<HTMLButtonElement>, "type" | "data-color" | "variant" | "icon" | "loading" | "asChild"> & {
        variant?: "primary" | "secondary" | "tertiary";
        'data-color'?: import("../../colors").Color | import("../../colors").SeverityDanger;
        icon?: boolean;
        loading?: boolean | React.ReactNode;
        asChild?: boolean;
        type?: React.ButtonHTMLAttributes<HTMLButtonElement>["type"];
    } & React.RefAttributes<HTMLButtonElement>, "ref"> & React.RefAttributes<HTMLButtonElement>>;
};
export type { DialogBlockProps } from './DialogBlock';
export type { DialogTriggerContextProps } from './DialogTriggerContext';
export type { DialogProps } from './Dialog';
export type { DialogTriggerProps } from './DialogTrigger';
export { Dialog, DialogBlock, DialogTriggerContext, DialogTrigger };
//# sourceMappingURL=index.d.ts.map