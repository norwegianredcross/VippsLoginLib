import type { ComponentPropsWithRef } from 'react';
import { Button } from '../Button/Button';
export type DialogTriggerProps = ComponentPropsWithRef<typeof Button>;
/**
 * DialogTrigger component, used within a Dialog.TriggerContext to open a dialog.
 *
 * @example
 * <Dialog.TriggerContext>
 *   <Dialog.Trigger>Open Dialog</Dialog.Trigger>
 *   <Dialog>
 *     Content
 *   </Dialog>
 * </Dialog.TriggerContext>
 */
export declare const DialogTrigger: React.ForwardRefExoticComponent<Omit<Omit<import("../../types").DefaultProps & React.ButtonHTMLAttributes<HTMLButtonElement>, "type" | "data-color" | "variant" | "icon" | "loading" | "asChild"> & {
    variant?: "primary" | "secondary" | "tertiary";
    'data-color'?: import("../../colors").Color | import("../../colors").SeverityDanger;
    icon?: boolean;
    loading?: boolean | React.ReactNode;
    asChild?: boolean;
    type?: React.ButtonHTMLAttributes<HTMLButtonElement>["type"];
} & React.RefAttributes<HTMLButtonElement>, "ref"> & React.RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=DialogTrigger.d.ts.map