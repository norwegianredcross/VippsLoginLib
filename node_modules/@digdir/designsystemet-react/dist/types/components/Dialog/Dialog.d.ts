import type { DialogHTMLAttributes } from 'react';
import type { DefaultProps } from '../../types';
import type { MergeRight } from '../../utilities';
export type DialogProps = MergeRight<DefaultProps & DialogHTMLAttributes<HTMLDialogElement>, {
    /**
     * Screen reader label of close button. Set false to hide the close button.
     * @default 'Lukk dialogvindu'
     */
    closeButton?: string | false;
    /**
     * Light dismiss behavior, allowing to close on backdrop click  by setting `closedby="any"`.
     *
     * @default 'closerequest'
     */
    closedby?: 'none' | 'closerequest' | 'any';
    /**
     * Toogle modal and non-modal dialog.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#creating_a_modal_dialog
     *
     * @default true
     */
    modal?: boolean;
    /**
     * @note Unlike standard html, where the open attribute always opens a non-modal dialog, Dialog's open prop uses the `modal` prop to determine whether the Dialog is modal or non-modal
     */
    open?: boolean;
    /**
     * Callback that is called when the dialog is closed.
     */
    onClose?: (event: Event) => void;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
}>;
/**
 * Dialog component, used to display a dialog dialog.
 *
 * @example with TriggerContext
 * <Dialog.TriggerContext>
 *   <Dialog.Trigger>Open Dialog</Dialog.Trigger>
 *   <Dialog>
 *     <Dialog.Block>
 *       Content
 *     </Dialog.Block>
 *   </Dialog>
 * </Dialog.TriggerContext>
 *
 * @example without TriggerContext
 * const dialogRef = useRef<HTMLDialogElement>(null);
 *
 * ...
 *
 * <Button onClick={() => dialogRef.current?.showModal()}>Open Dialog</Button>
 * <Dialog ref={dialogRef}>
 *   Content
 * </Dialog>
 */
export declare const Dialog: React.ForwardRefExoticComponent<Omit<DefaultProps & DialogHTMLAttributes<HTMLDialogElement>, "asChild" | "open" | "onClose" | "closeButton" | "closedby" | "modal"> & {
    /**
     * Screen reader label of close button. Set false to hide the close button.
     * @default 'Lukk dialogvindu'
     */
    closeButton?: string | false;
    /**
     * Light dismiss behavior, allowing to close on backdrop click  by setting `closedby="any"`.
     *
     * @default 'closerequest'
     */
    closedby?: "none" | "closerequest" | "any";
    /**
     * Toogle modal and non-modal dialog.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#creating_a_modal_dialog
     *
     * @default true
     */
    modal?: boolean;
    /**
     * @note Unlike standard html, where the open attribute always opens a non-modal dialog, Dialog's open prop uses the `modal` prop to determine whether the Dialog is modal or non-modal
     */
    open?: boolean;
    /**
     * Callback that is called when the dialog is closed.
     */
    onClose?: (event: Event) => void;
    /**
     * Change the default rendered element for the one passed as a child, merging their props and behavior.
     * @default false
     */
    asChild?: boolean;
} & React.RefAttributes<HTMLDialogElement>>;
//# sourceMappingURL=Dialog.d.ts.map