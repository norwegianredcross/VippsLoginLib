import { PopoverTrigger } from './PopoverTrigger';
import { PopoverTriggerContext } from './PopoverTriggerContext';
/**
 * Popover component, used to display content in a popover over an element.
 *
 * @example
 * <Popover.TriggerContext>
 *   <Popover.Trigger>Open Popover</Popover.Trigger>
 *   <Popover>
 *     Content
 *   </Popover>
 * </Popover.TriggerContext>
 */
declare const Popover: React.ForwardRefExoticComponent<Omit<import("../../types").DefaultProps & React.HTMLAttributes<HTMLDivElement>, "id" | "data-color" | "variant" | "asChild" | "open" | "placement" | "onClose" | "onOpen" | "autoPlacement"> & {
    id?: string;
    placement?: import("@floating-ui/utils").Placement;
    open?: boolean;
    variant?: "default" | "tinted";
    'data-color'?: import("../../colors").Color | import("../../colors").SeverityColors;
    onOpen?: () => void;
    onClose?: () => void;
    autoPlacement?: boolean;
    asChild?: boolean;
} & React.RefAttributes<HTMLDivElement>> & {
    TriggerContext: {
        ({ children, }: import("./PopoverTriggerContext").PopoverTriggerContextProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Trigger: React.ForwardRefExoticComponent<import("./PopoverTrigger").PopoverTriggerProps & React.RefAttributes<HTMLButtonElement>>;
};
export type { PopoverProps } from './Popover';
export type { PopoverTriggerContextProps } from './PopoverTriggerContext';
export type { PopoverTriggerProps } from './PopoverTrigger';
export { Popover, PopoverTriggerContext, PopoverTrigger };
//# sourceMappingURL=index.d.ts.map