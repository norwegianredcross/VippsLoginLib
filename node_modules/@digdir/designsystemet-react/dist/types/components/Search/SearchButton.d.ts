import { type ReactNode } from 'react';
import type { MergeRight } from '../../utilities';
import { type ButtonProps } from '../Button';
export type SearchButtonProps = MergeRight<ButtonProps, {
    /**
     * Variant of the button
     * @default 'primary'
     */
    variant?: 'primary' | 'secondary';
    /**
     * Children of the button
     * @default 'Søk'
     */
    children?: ReactNode;
}>;
/**
 * SearchButton component, used to display a search button within a Search component.
 *
 * @example
 * <Search>
 *   <Search.Input aria-label='Søk' />
 *   <Search.Button>Søk</Search.Button>
 * </Search>
 */
export declare const SearchButton: React.ForwardRefExoticComponent<Omit<import("../../types").DefaultProps & React.ButtonHTMLAttributes<HTMLButtonElement>, "type" | "data-color" | "variant" | "icon" | "loading" | "asChild"> & {
    variant?: "primary" | "secondary" | "tertiary";
    'data-color'?: import("../../colors").Color | import("../../colors").SeverityDanger;
    icon?: boolean;
    loading?: boolean | ReactNode;
    asChild?: boolean;
    type?: React.ButtonHTMLAttributes<HTMLButtonElement>["type"];
} & React.RefAttributes<HTMLButtonElement>>;
//# sourceMappingURL=SearchButton.d.ts.map