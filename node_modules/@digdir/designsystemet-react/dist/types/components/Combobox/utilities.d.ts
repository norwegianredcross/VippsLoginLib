import type { ReactElement, ReactNode } from 'react';
import type { ComboboxCustomProps } from './Custom';
export declare function isComboboxCustom(child: ReactNode): child is ReactElement<ComboboxCustomProps>;
export declare function isInteractiveComboboxCustom(child: ReactNode): child is ReactElement<ComboboxCustomProps>;
/**
 * We use this function to prefix the value of the options so we can make sure numbers as strings are not parsed as numbers in objects
 * @param value
 * @returns
 */
export declare const prefix: (value?: string) => string;
export declare const removePrefix: (value: string) => string;
type ReactInternalHack = {
    _valueTracker?: {
        setValue: (a: string) => void;
    };
};
export declare const setReactInputValue: (input: HTMLInputElement & ReactInternalHack, value: string) => void;
export {};
//# sourceMappingURL=utilities.d.ts.map