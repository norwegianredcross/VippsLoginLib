{"ast":null,"code":"'use client';\n\nimport { useCallback, useMemo, Children, useState } from 'react';\nimport { isComboboxOption } from './Option/Option.js';\nimport { isInteractiveComboboxCustom, prefix } from './utilities.js';\nconst isOption = option => !!option;\nfunction useCombobox({\n  children,\n  inputValue,\n  multiple,\n  filter = (inputValue, option) => {\n    return option.label.toLowerCase().startsWith(inputValue.toLowerCase());\n  },\n  initialValue\n}) {\n  const filterCallback = useCallback(filter, [filter]);\n  const {\n    optionsChildren,\n    customIds,\n    restChildren,\n    interactiveChildren\n  } = useMemo(() => {\n    const allChildren = Children.toArray(children);\n    const result = allChildren.reduce((acc, child) => {\n      if (isComboboxOption(child)) {\n        acc.optionsChildren.push(child);\n      } else {\n        acc.restChildren.push(child);\n        if (isInteractiveComboboxCustom(child)) {\n          const childElement = child;\n          acc.interactiveChildren.push(childElement);\n          if (!childElement.props.id) {\n            throw new Error('If ComboboxCustom is interactive, it must have an id');\n          }\n          acc.customIds.push(childElement.props.id);\n        }\n      }\n      return acc;\n    }, {\n      optionsChildren: [],\n      customIds: [],\n      restChildren: [],\n      interactiveChildren: []\n    });\n    return result;\n  }, [children]);\n  const options = useMemo(() => {\n    const values = [];\n    const allOptions = {};\n    optionsChildren.map(child => {\n      const props = child.props;\n      let label = props.displayValue || '';\n      if (!props.displayValue) {\n        let childrenLabel = '';\n        // go over children and find all strings\n        Children.forEach(props.children, child => {\n          if (typeof child === 'string') {\n            childrenLabel += child;\n          } else {\n            throw new Error('If ComboboxOption is not a string, it must have a displayValue prop');\n          }\n        });\n        label = childrenLabel;\n      }\n      if (values.includes(props.value)) {\n        console.warn(`Combobox has multiple options with the same value: ${props.value}`);\n      }\n      values.push(props.value);\n      allOptions[prefix(String(props.value))] = {\n        value: String(props.value),\n        label,\n        displayValue: props.displayValue,\n        description: props.description\n      };\n    });\n    return allOptions;\n  }, [optionsChildren]);\n  const preSelectedOptions = useMemo(() => (initialValue?.map(key => {\n    return prefix(key);\n  }) || []).reduce((acc, value) => {\n    const option = options[value];\n    if (isOption(option)) {\n      acc[value] = option;\n    }\n    return acc;\n  }, {}), [initialValue, options]);\n  const [selectedOptions, setSelectedOptions] = useState(preSelectedOptions);\n  const {\n    filteredOptions,\n    filteredOptionsChildren\n  } = useMemo(() => {\n    const filteredOptions = [];\n    const filteredOptionsChildren = Object.keys(options).map((option, index) => {\n      /* If we have a selected value in single mode and the input matches an option, return all children */\n      if (!multiple && Object.keys(selectedOptions).length === 1) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n      if (multiple && selectedOptions[option]) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n      if (filterCallback(inputValue, options[option])) {\n        filteredOptions.push(option);\n        return optionsChildren[index];\n      }\n      return;\n    }).filter(child => child);\n    return {\n      filteredOptions,\n      filteredOptionsChildren\n    };\n  }, [filterCallback, inputValue, multiple, options, optionsChildren, selectedOptions]);\n  return {\n    filteredOptionsChildren,\n    filteredOptions,\n    restChildren,\n    options,\n    customIds,\n    selectedOptions,\n    interactiveChildren,\n    setSelectedOptions\n  };\n}\nexport { useCombobox };","map":{"version":3,"names":["useCallback","useMemo","Children","useState","isComboboxOption","isInteractiveComboboxCustom","prefix","isOption","option","useCombobox","children","inputValue","multiple","filter","label","toLowerCase","startsWith","initialValue","filterCallback","optionsChildren","customIds","restChildren","interactiveChildren","allChildren","toArray","result","reduce","acc","child","push","childElement","props","id","Error","options","values","allOptions","map","displayValue","childrenLabel","forEach","includes","value","console","warn","String","description","preSelectedOptions","key","selectedOptions","setSelectedOptions","filteredOptions","filteredOptionsChildren","Object","keys","index","length"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/Combobox/useCombobox.js"],"sourcesContent":["'use client';\nimport { useCallback, useMemo, Children, useState } from 'react';\nimport { isComboboxOption } from './Option/Option.js';\nimport { isInteractiveComboboxCustom, prefix } from './utilities.js';\n\nconst isOption = (option) => !!option;\nfunction useCombobox({ children, inputValue, multiple, filter = (inputValue, option) => {\n    return option.label.toLowerCase().startsWith(inputValue.toLowerCase());\n}, initialValue, }) {\n    const filterCallback = useCallback(filter, [filter]);\n    const { optionsChildren, customIds, restChildren, interactiveChildren } = useMemo(() => {\n        const allChildren = Children.toArray(children);\n        const result = allChildren.reduce((acc, child) => {\n            if (isComboboxOption(child)) {\n                acc.optionsChildren.push(child);\n            }\n            else {\n                acc.restChildren.push(child);\n                if (isInteractiveComboboxCustom(child)) {\n                    const childElement = child;\n                    acc.interactiveChildren.push(childElement);\n                    if (!childElement.props.id) {\n                        throw new Error('If ComboboxCustom is interactive, it must have an id');\n                    }\n                    acc.customIds.push(childElement.props.id);\n                }\n            }\n            return acc;\n        }, {\n            optionsChildren: [],\n            customIds: [],\n            restChildren: [],\n            interactiveChildren: [],\n        });\n        return result;\n    }, [children]);\n    const options = useMemo(() => {\n        const values = [];\n        const allOptions = {};\n        optionsChildren.map((child) => {\n            const props = child.props;\n            let label = props.displayValue || '';\n            if (!props.displayValue) {\n                let childrenLabel = '';\n                // go over children and find all strings\n                Children.forEach(props.children, (child) => {\n                    if (typeof child === 'string') {\n                        childrenLabel += child;\n                    }\n                    else {\n                        throw new Error('If ComboboxOption is not a string, it must have a displayValue prop');\n                    }\n                });\n                label = childrenLabel;\n            }\n            if (values.includes(props.value)) {\n                console.warn(`Combobox has multiple options with the same value: ${props.value}`);\n            }\n            values.push(props.value);\n            allOptions[prefix(String(props.value))] = {\n                value: String(props.value),\n                label,\n                displayValue: props.displayValue,\n                description: props.description,\n            };\n        });\n        return allOptions;\n    }, [optionsChildren]);\n    const preSelectedOptions = useMemo(() => (initialValue?.map((key) => {\n        return prefix(key);\n    }) || []).reduce((acc, value) => {\n        const option = options[value];\n        if (isOption(option)) {\n            acc[value] = option;\n        }\n        return acc;\n    }, {}), [initialValue, options]);\n    const [selectedOptions, setSelectedOptions] = useState(preSelectedOptions);\n    const { filteredOptions, filteredOptionsChildren } = useMemo(() => {\n        const filteredOptions = [];\n        const filteredOptionsChildren = Object.keys(options)\n            .map((option, index) => {\n            /* If we have a selected value in single mode and the input matches an option, return all children */\n            if (!multiple && Object.keys(selectedOptions).length === 1) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n            if (multiple && selectedOptions[option]) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n            if (filterCallback(inputValue, options[option])) {\n                filteredOptions.push(option);\n                return optionsChildren[index];\n            }\n            return;\n        })\n            .filter((child) => child);\n        return { filteredOptions, filteredOptionsChildren };\n    }, [\n        filterCallback,\n        inputValue,\n        multiple,\n        options,\n        optionsChildren,\n        selectedOptions,\n    ]);\n    return {\n        filteredOptionsChildren,\n        filteredOptions,\n        restChildren,\n        options,\n        customIds,\n        selectedOptions,\n        interactiveChildren,\n        setSelectedOptions,\n    };\n}\n\nexport { useCombobox };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}