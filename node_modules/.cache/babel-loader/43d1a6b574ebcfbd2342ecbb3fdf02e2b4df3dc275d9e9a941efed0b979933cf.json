{"ast":null,"code":"'use client';\n\nimport { useMemo } from 'react';\nconst getSteps = (now, max, show) => {\n  const offset = (show - 1) / 2;\n  const start = Math.min(Math.max(now - Math.floor(offset), 1), max - show + 1);\n  const end = Math.min(Math.max(now + Math.ceil(offset), show), max);\n  const pages = Array.from({\n    length: end + 1 - start\n  }, (_, i) => i + start);\n  if (show > 4 && start > 1) pages.splice(0, 2, 1, 0);\n  if (show > 3 && end < max) pages.splice(-2, 2, 0, max);\n  return pages;\n};\n/**\n * Hook to help manage pagination state\n *\n * @example\n * const { pages, nextButtonProps, prevButtonProps } = usePagination({\n *   currentPage: page,\n *   totalPages: 10,\n *   showPages: 7,\n *   setCurrentPage,\n * })\n *\n * <Pagination>\n *   <Pagination.Item>\n *     <Pagination.Button {...prevButtonProps}>Forrige</Pagination.Button>\n *   </Pagination.Item>\n *   {pages.map(({ page, itemKey, buttonProps }) => (\n *     <Pagination.Item key={itemKey}>\n *       {typeof page === 'number' && (\n *         <Pagination.Button {...buttonProps} aria-label={`Side ${page}`}>\n *           {page}\n *         </Pagination.Button>\n *       )}\n *     </Pagination.Item>\n *   ))}\n *   <Pagination.Item>\n *     <Pagination.Button {...nextButtonProps}>Neste</Pagination.Button>\n *   </Pagination.Item>\n * </Pagination>\n **/\nconst usePagination = ({\n  currentPage = 1,\n  setCurrentPage,\n  onChange,\n  totalPages = 1,\n  showPages = 7\n}) => useMemo(() => {\n  const hasNext = currentPage < totalPages;\n  const hasPrev = currentPage !== 1;\n  const handleClick = page => event => {\n    if (page < 1 || page > totalPages) return event.preventDefault(); // Prevent out of bounds navigation\n    onChange?.(event, page);\n    if (!event.defaultPrevented) setCurrentPage?.(page); // Allow stopping change by calling event.preventDefault() in onChange\n  };\n  return {\n    /** Number of steps */\n    pages: getSteps(currentPage, totalPages, showPages).map((page, index) => ({\n      /**\n       * Page number or \"ellipsis\" for the ellipsis item\n       */\n      page: page || 'ellipsis',\n      /**\n       * Unique key for the item\n       */\n      itemKey: page ? `page-${page}` : `ellipsis-${index}`,\n      // React key utility\n      /**\n       * Properties to spread on Pagination.Button\n       */\n      buttonProps: page ? {\n        'aria-current': page === currentPage ? 'page' : undefined,\n        onClick: handleClick(page),\n        variant: page === currentPage ? 'primary' : 'tertiary'\n      } : null\n    })),\n    /** Properties to spread on Pagination.Button used for previous naviagation */\n    prevButtonProps: {\n      'aria-disabled': !hasPrev,\n      // Using aria-disabled to support all HTML elements because of potential asChild\n      onClick: handleClick(currentPage - 1),\n      variant: 'tertiary'\n    },\n    /** Properties to spread on Pagination.Button used for next naviagation */\n    nextButtonProps: {\n      'aria-disabled': !hasNext,\n      // Using aria-disabled to support all HTML elements because of potential asChild\n      onClick: handleClick(currentPage + 1),\n      variant: 'tertiary'\n    },\n    /** Indication if previous page action should be shown or not */\n    hasPrev,\n    /** Indication if next page action should be shown or not */\n    hasNext\n  };\n}, [currentPage, totalPages, showPages]);\nexport { usePagination };","map":{"version":3,"names":["useMemo","getSteps","now","max","show","offset","start","Math","min","floor","end","ceil","pages","Array","from","length","_","i","splice","usePagination","currentPage","setCurrentPage","onChange","totalPages","showPages","hasNext","hasPrev","handleClick","page","event","preventDefault","defaultPrevented","map","index","itemKey","buttonProps","undefined","onClick","variant","prevButtonProps","nextButtonProps"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/utilities/hooks/usePagination/usePagination.js"],"sourcesContent":["'use client';\nimport { useMemo } from 'react';\n\nconst getSteps = (now, max, show) => {\n    const offset = (show - 1) / 2;\n    const start = Math.min(Math.max(now - Math.floor(offset), 1), max - show + 1);\n    const end = Math.min(Math.max(now + Math.ceil(offset), show), max);\n    const pages = Array.from({ length: end + 1 - start }, (_, i) => i + start);\n    if (show > 4 && start > 1)\n        pages.splice(0, 2, 1, 0);\n    if (show > 3 && end < max)\n        pages.splice(-2, 2, 0, max);\n    return pages;\n};\n/**\n * Hook to help manage pagination state\n *\n * @example\n * const { pages, nextButtonProps, prevButtonProps } = usePagination({\n *   currentPage: page,\n *   totalPages: 10,\n *   showPages: 7,\n *   setCurrentPage,\n * })\n *\n * <Pagination>\n *   <Pagination.Item>\n *     <Pagination.Button {...prevButtonProps}>Forrige</Pagination.Button>\n *   </Pagination.Item>\n *   {pages.map(({ page, itemKey, buttonProps }) => (\n *     <Pagination.Item key={itemKey}>\n *       {typeof page === 'number' && (\n *         <Pagination.Button {...buttonProps} aria-label={`Side ${page}`}>\n *           {page}\n *         </Pagination.Button>\n *       )}\n *     </Pagination.Item>\n *   ))}\n *   <Pagination.Item>\n *     <Pagination.Button {...nextButtonProps}>Neste</Pagination.Button>\n *   </Pagination.Item>\n * </Pagination>\n **/\nconst usePagination = ({ currentPage = 1, setCurrentPage, onChange, totalPages = 1, showPages = 7, }) => useMemo(() => {\n    const hasNext = currentPage < totalPages;\n    const hasPrev = currentPage !== 1;\n    const handleClick = (page) => (event) => {\n        if (page < 1 || page > totalPages)\n            return event.preventDefault(); // Prevent out of bounds navigation\n        onChange?.(event, page);\n        if (!event.defaultPrevented)\n            setCurrentPage?.(page); // Allow stopping change by calling event.preventDefault() in onChange\n    };\n    return {\n        /** Number of steps */\n        pages: getSteps(currentPage, totalPages, showPages).map((page, index) => ({\n            /**\n             * Page number or \"ellipsis\" for the ellipsis item\n             */\n            page: page || 'ellipsis',\n            /**\n             * Unique key for the item\n             */\n            itemKey: page ? `page-${page}` : `ellipsis-${index}`, // React key utility\n            /**\n             * Properties to spread on Pagination.Button\n             */\n            buttonProps: (page\n                ? {\n                    'aria-current': page === currentPage ? 'page' : undefined,\n                    onClick: handleClick(page),\n                    variant: page === currentPage ? 'primary' : 'tertiary',\n                }\n                : null),\n        })),\n        /** Properties to spread on Pagination.Button used for previous naviagation */\n        prevButtonProps: {\n            'aria-disabled': !hasPrev, // Using aria-disabled to support all HTML elements because of potential asChild\n            onClick: handleClick(currentPage - 1),\n            variant: 'tertiary',\n        },\n        /** Properties to spread on Pagination.Button used for next naviagation */\n        nextButtonProps: {\n            'aria-disabled': !hasNext, // Using aria-disabled to support all HTML elements because of potential asChild\n            onClick: handleClick(currentPage + 1),\n            variant: 'tertiary',\n        },\n        /** Indication if previous page action should be shown or not */\n        hasPrev,\n        /** Indication if next page action should be shown or not */\n        hasNext,\n    };\n}, [currentPage, totalPages, showPages]);\n\nexport { usePagination };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}