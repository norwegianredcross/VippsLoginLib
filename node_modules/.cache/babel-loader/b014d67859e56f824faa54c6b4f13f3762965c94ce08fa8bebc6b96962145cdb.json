{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useMergeRefs } from '@floating-ui/react';\nimport { ChevronUpIcon, ChevronDownIcon } from '@navikt/aksel-icons';\nimport cl from 'clsx/lite';\nimport { useContext, useRef } from 'react';\nimport { ComboboxContext } from '../ComboboxContext.js';\nimport { useComboboxIdDispatch } from '../ComboboxIdContext.js';\nimport { prefix } from '../utilities.js';\nimport ComboboxChips from './ComboboxChips.js';\nimport ComboboxClearButton from './ComboboxClearButton.js';\nimport { Paragraph } from '../../Paragraph/Paragraph.js';\nimport { omit } from '../../../utilities/omit/omit.js';\nconst ComboboxInput = ({\n  hideClearButton,\n  listId,\n  error,\n  hideChips,\n  handleKeyDown,\n  ...rest\n}) => {\n  const context = useContext(ComboboxContext);\n  const idDispatch = useComboboxIdDispatch();\n  const clearButtonRef = useRef(null);\n  if (!context) {\n    throw new Error('ComboboxContext is missing');\n  }\n  const setActiveIndex = id => {\n    idDispatch?.({\n      type: 'SET_ACTIVE_INDEX',\n      payload: id\n    });\n  };\n  const {\n    forwareddRef,\n    readOnly,\n    disabled,\n    open,\n    inputRef,\n    refs,\n    inputValue,\n    multiple,\n    selectedOptions,\n    formFieldProps,\n    htmlSize,\n    options,\n    setOpen,\n    getReferenceProps,\n    setInputValue,\n    handleSelectOption,\n    size\n  } = context;\n  const mergedRefs = useMergeRefs([forwareddRef, inputRef]);\n  // onChange function for the input\n  const onChange = event => {\n    const value = event.target.value;\n    setInputValue(value);\n    setActiveIndex(0);\n    // check if input value is the same as a label, if so, select it\n    for (const option of Object.values(options)) {\n      if (option.label.toLowerCase() === value.toLowerCase()) {\n        /* if option is already selected, discard selecting it, since it would de-select */\n        if (selectedOptions[prefix(option.value)]) continue;\n        handleSelectOption({\n          option\n        });\n      }\n    }\n  };\n  const showClearButton = !hideClearButton && Object.keys(selectedOptions).length > 0;\n  /* Props from floating-ui */\n  const props = getReferenceProps({\n    ref: refs?.setReference,\n    role: null,\n    'aria-controls': null,\n    'aria-expanded': null,\n    'aria-haspopup': null,\n    /* If we click the wrapper, toggle open, set index to first option, and focus the input */\n    onClick(event) {\n      if (disabled) return;\n      if (readOnly) return;\n      if (clearButtonRef.current?.contains(event.target)) return;\n      setOpen(!open);\n      setActiveIndex(0);\n      inputRef.current?.focus();\n    },\n    /* Handles list navigation */\n    onKeyDown: handleKeyDown,\n    // preventDefault on keydown to avoid sending in form\n    onKeyPress(event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n      }\n    }\n  });\n  return jsx(Paragraph, {\n    \"data-size\": size,\n    asChild: true,\n    children: jsxs(\"div\", {\n      ...props,\n      \"aria-disabled\": disabled ? 'true' : undefined,\n      className: cl('ds-textfield__input', 'ds-combobox__input__wrapper', readOnly && 'ds-combobox--readonly', error && 'ds-combobox--error'),\n      children: [jsxs(\"div\", {\n        className: 'ds-combobox__chip-and-input',\n        children: [multiple && !hideChips && jsx(ComboboxChips, {}), jsx(Paragraph, {\n          \"data-size\": size,\n          asChild: true,\n          children: jsx(\"input\", {\n            ref: mergedRefs,\n            \"aria-activedescendant\": props['aria-activedescendant'],\n            readOnly: readOnly,\n            \"aria-autocomplete\": 'list',\n            role: 'combobox',\n            \"aria-expanded\": open,\n            \"aria-controls\": open ? listId : undefined,\n            autoComplete: 'off',\n            size: htmlSize,\n            value: inputValue,\n            ...omit(['style', 'className'], rest),\n            ...formFieldProps.inputProps,\n            className: 'ds-combobox__input',\n            onChange: e => {\n              onChange(e);\n              !open && setOpen(true);\n              rest.onChange?.(e);\n            }\n          })\n        })]\n      }), showClearButton && jsx(ComboboxClearButton, {\n        ref: clearButtonRef\n      }), jsx(\"div\", {\n        className: 'ds-combobox__arrow',\n        children: open ? jsx(ChevronUpIcon, {\n          title: 'arrow up',\n          fontSize: '1.5em'\n        }) : jsx(ChevronDownIcon, {\n          title: 'arrow down',\n          fontSize: '1.5em'\n        })\n      })]\n    })\n  });\n};\nComboboxInput.displayName = 'ComboboxInput';\nexport { ComboboxInput as default };","map":{"version":3,"names":["jsx","jsxs","useMergeRefs","ChevronUpIcon","ChevronDownIcon","cl","useContext","useRef","ComboboxContext","useComboboxIdDispatch","prefix","ComboboxChips","ComboboxClearButton","Paragraph","omit","ComboboxInput","hideClearButton","listId","error","hideChips","handleKeyDown","rest","context","idDispatch","clearButtonRef","Error","setActiveIndex","id","type","payload","forwareddRef","readOnly","disabled","open","inputRef","refs","inputValue","multiple","selectedOptions","formFieldProps","htmlSize","options","setOpen","getReferenceProps","setInputValue","handleSelectOption","size","mergedRefs","onChange","event","value","target","option","Object","values","label","toLowerCase","showClearButton","keys","length","props","ref","setReference","role","onClick","current","contains","focus","onKeyDown","onKeyPress","key","preventDefault","asChild","children","undefined","className","autoComplete","inputProps","e","title","fontSize","displayName","default"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/Combobox/internal/ComboboxInput.js"],"sourcesContent":["'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useMergeRefs } from '@floating-ui/react';\nimport { ChevronUpIcon, ChevronDownIcon } from '@navikt/aksel-icons';\nimport cl from 'clsx/lite';\nimport { useContext, useRef } from 'react';\nimport { ComboboxContext } from '../ComboboxContext.js';\nimport { useComboboxIdDispatch } from '../ComboboxIdContext.js';\nimport { prefix } from '../utilities.js';\nimport ComboboxChips from './ComboboxChips.js';\nimport ComboboxClearButton from './ComboboxClearButton.js';\nimport { Paragraph } from '../../Paragraph/Paragraph.js';\nimport { omit } from '../../../utilities/omit/omit.js';\n\nconst ComboboxInput = ({ hideClearButton, listId, error, hideChips, handleKeyDown, ...rest }) => {\n    const context = useContext(ComboboxContext);\n    const idDispatch = useComboboxIdDispatch();\n    const clearButtonRef = useRef(null);\n    if (!context) {\n        throw new Error('ComboboxContext is missing');\n    }\n    const setActiveIndex = (id) => {\n        idDispatch?.({ type: 'SET_ACTIVE_INDEX', payload: id });\n    };\n    const { forwareddRef, readOnly, disabled, open, inputRef, refs, inputValue, multiple, selectedOptions, formFieldProps, htmlSize, options, setOpen, getReferenceProps, setInputValue, handleSelectOption, size, } = context;\n    const mergedRefs = useMergeRefs([forwareddRef, inputRef]);\n    // onChange function for the input\n    const onChange = (event) => {\n        const value = event.target.value;\n        setInputValue(value);\n        setActiveIndex(0);\n        // check if input value is the same as a label, if so, select it\n        for (const option of Object.values(options)) {\n            if (option.label.toLowerCase() === value.toLowerCase()) {\n                /* if option is already selected, discard selecting it, since it would de-select */\n                if (selectedOptions[prefix(option.value)])\n                    continue;\n                handleSelectOption({ option });\n            }\n        }\n    };\n    const showClearButton = !hideClearButton && Object.keys(selectedOptions).length > 0;\n    /* Props from floating-ui */\n    const props = getReferenceProps({\n        ref: refs?.setReference,\n        role: null,\n        'aria-controls': null,\n        'aria-expanded': null,\n        'aria-haspopup': null,\n        /* If we click the wrapper, toggle open, set index to first option, and focus the input */\n        onClick(event) {\n            if (disabled)\n                return;\n            if (readOnly)\n                return;\n            if (clearButtonRef.current?.contains(event.target))\n                return;\n            setOpen(!open);\n            setActiveIndex(0);\n            inputRef.current?.focus();\n        },\n        /* Handles list navigation */\n        onKeyDown: handleKeyDown,\n        // preventDefault on keydown to avoid sending in form\n        onKeyPress(event) {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n            }\n        },\n    });\n    return (jsx(Paragraph, { \"data-size\": size, asChild: true, children: jsxs(\"div\", { ...props, \"aria-disabled\": disabled ? 'true' : undefined, className: cl('ds-textfield__input', 'ds-combobox__input__wrapper', readOnly && 'ds-combobox--readonly', error && 'ds-combobox--error'), children: [jsxs(\"div\", { className: 'ds-combobox__chip-and-input', children: [multiple && !hideChips && jsx(ComboboxChips, {}), jsx(Paragraph, { \"data-size\": size, asChild: true, children: jsx(\"input\", { ref: mergedRefs, \"aria-activedescendant\": props['aria-activedescendant'], readOnly: readOnly, \"aria-autocomplete\": 'list', role: 'combobox', \"aria-expanded\": open, \"aria-controls\": open ? listId : undefined, autoComplete: 'off', size: htmlSize, value: inputValue, ...omit(['style', 'className'], rest), ...formFieldProps.inputProps, className: 'ds-combobox__input', onChange: (e) => {\n                                    onChange(e);\n                                    !open && setOpen(true);\n                                    rest.onChange?.(e);\n                                } }) })] }), showClearButton && jsx(ComboboxClearButton, { ref: clearButtonRef }), jsx(\"div\", { className: 'ds-combobox__arrow', children: open ? (jsx(ChevronUpIcon, { title: 'arrow up', fontSize: '1.5em' })) : (jsx(ChevronDownIcon, { title: 'arrow down', fontSize: '1.5em' })) })] }) }));\n};\nComboboxInput.displayName = 'ComboboxInput';\n\nexport { ComboboxInput as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}