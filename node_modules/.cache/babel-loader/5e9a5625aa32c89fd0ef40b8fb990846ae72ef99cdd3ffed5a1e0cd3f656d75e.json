{"ast":null,"code":"'use client';\n\nimport { useState, useId } from 'react';\n\n/**\n * useRadioGroup is used to group multiple <Radio> components\n * @example\n * const { getRadioProps, validationMessageProps, value, setValue } = useRadioGroup({\n *   disabled: false,\n *   error: 'Validation message text',\n *   name: 'group-name',\n *   onChange: (nextValue, prevValue) => {},\n *   readOnly: false,\n *   required: true,\n *   value: '',\n * });\n */\nfunction useRadioGroup({\n  error,\n  readOnly,\n  required,\n  disabled,\n  name,\n  onChange,\n  value: initalValue = ''\n} = {}) {\n  const [groupValue, setGroupValue] = useState(initalValue);\n  const errorId = useId();\n  const namedId = useId();\n  const radioGroupName = name || namedId;\n  return {\n    /**\n     * Current value of the group.\n     */\n    value: groupValue,\n    /**\n     * Set the value of the group.\n     *\n     * @param value string[]\n     * @returns void\n     */\n    setValue: setGroupValue,\n    /**\n     * Props to send to the `Radio` component.\n     * @example\n     * <Radio label=\"Option 1\" {...getRadioProps('option-1')} />\n     */\n    getRadioProps: propsOrValue => {\n      const props = typeof propsOrValue === 'string' ? {\n        value: propsOrValue\n      } : propsOrValue;\n      const {\n        ref: forwardedRef = undefined,\n        value = '',\n        ...rest\n      } = props;\n      const handleRef = element => {\n        if (element) {\n          // Set initial checked state\n          element.checked = value === groupValue;\n        }\n        // Handle forwarded ref\n        if (forwardedRef) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(element);\n          } else {\n            forwardedRef.current = element;\n          }\n        }\n      };\n      const handleChange = e => {\n        if (e.target.name === radioGroupName) {\n          setGroupValue(prevValue => {\n            onChange?.(e.target.value, prevValue);\n            return e.target.value;\n          });\n        }\n      };\n      return {\n        ...rest,\n        name: radioGroupName,\n        'aria-describedby': `${error ? errorId : ''} ${rest['aria-describedby'] || ''}`.trim() || undefined,\n        'aria-invalid': !!error || rest['aria-invalid'],\n        value,\n        ref: handleRef,\n        required: required || rest.required,\n        readOnly: readOnly || rest.readOnly,\n        disabled: disabled || rest.disabled,\n        onChange: e => {\n          rest.onChange?.(e);\n          if (e.defaultPrevented) return;\n          handleChange(e);\n        }\n      };\n    },\n    /**\n     * Props to send to the `ValidationMessage` component.\n     *\n     * @example\n     * <ValidationMessage {...validationMessageProps} />\n     */\n    validationMessageProps: {\n      children: error,\n      hidden: !error,\n      id: errorId\n    }\n  };\n}\nexport { useRadioGroup };","map":{"version":3,"names":["useState","useId","useRadioGroup","error","readOnly","required","disabled","name","onChange","value","initalValue","groupValue","setGroupValue","errorId","namedId","radioGroupName","setValue","getRadioProps","propsOrValue","props","ref","forwardedRef","undefined","rest","handleRef","element","checked","current","handleChange","e","target","prevValue","trim","defaultPrevented","validationMessageProps","children","hidden","id"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/utilities/hooks/useRadioGroup/useRadioGroup.js"],"sourcesContent":["'use client';\nimport { useState, useId } from 'react';\n\n/**\n * useRadioGroup is used to group multiple <Radio> components\n * @example\n * const { getRadioProps, validationMessageProps, value, setValue } = useRadioGroup({\n *   disabled: false,\n *   error: 'Validation message text',\n *   name: 'group-name',\n *   onChange: (nextValue, prevValue) => {},\n *   readOnly: false,\n *   required: true,\n *   value: '',\n * });\n */\nfunction useRadioGroup({ error, readOnly, required, disabled, name, onChange, value: initalValue = '', } = {}) {\n    const [groupValue, setGroupValue] = useState(initalValue);\n    const errorId = useId();\n    const namedId = useId();\n    const radioGroupName = name || namedId;\n    return {\n        /**\n         * Current value of the group.\n         */\n        value: groupValue,\n        /**\n         * Set the value of the group.\n         *\n         * @param value string[]\n         * @returns void\n         */\n        setValue: setGroupValue,\n        /**\n         * Props to send to the `Radio` component.\n         * @example\n         * <Radio label=\"Option 1\" {...getRadioProps('option-1')} />\n         */\n        getRadioProps: (propsOrValue) => {\n            const props = typeof propsOrValue === 'string'\n                ? { value: propsOrValue }\n                : propsOrValue;\n            const { ref: forwardedRef = undefined, value = '', ...rest } = props;\n            const handleRef = (element) => {\n                if (element) {\n                    // Set initial checked state\n                    element.checked = value === groupValue;\n                }\n                // Handle forwarded ref\n                if (forwardedRef) {\n                    if (typeof forwardedRef === 'function') {\n                        forwardedRef(element);\n                    }\n                    else {\n                        forwardedRef.current = element;\n                    }\n                }\n            };\n            const handleChange = (e) => {\n                if (e.target.name === radioGroupName) {\n                    setGroupValue((prevValue) => {\n                        onChange?.(e.target.value, prevValue);\n                        return e.target.value;\n                    });\n                }\n            };\n            return {\n                ...rest,\n                name: radioGroupName,\n                'aria-describedby': `${error ? errorId : ''} ${rest['aria-describedby'] || ''}`.trim() ||\n                    undefined,\n                'aria-invalid': !!error || rest['aria-invalid'],\n                value,\n                ref: handleRef,\n                required: required || rest.required,\n                readOnly: readOnly || rest.readOnly,\n                disabled: disabled || rest.disabled,\n                onChange: (e) => {\n                    rest.onChange?.(e);\n                    if (e.defaultPrevented)\n                        return;\n                    handleChange(e);\n                },\n            };\n        },\n        /**\n         * Props to send to the `ValidationMessage` component.\n         *\n         * @example\n         * <ValidationMessage {...validationMessageProps} />\n         */\n        validationMessageProps: {\n            children: error,\n            hidden: !error,\n            id: errorId,\n        },\n    };\n}\n\nexport { useRadioGroup };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}