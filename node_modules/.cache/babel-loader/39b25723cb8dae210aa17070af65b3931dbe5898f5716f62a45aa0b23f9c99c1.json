{"ast":null,"code":"'use client';\n\nimport { useComboboxId } from './ComboboxIdContext.js';\nimport { useDebounceCallback } from '../../utilities/hooks/useDebounceCallback/useDebounceCallback.js';\nconst useComboboxKeyboard = ({\n  readOnly,\n  disabled,\n  interactiveChildren,\n  filteredOptions,\n  inputValue,\n  selectedOptions,\n  multiple,\n  open,\n  options,\n  setOpen,\n  handleSelectOption\n}) => {\n  const {\n    activeIndex\n  } = useComboboxId();\n  // handle keyboard navigation in the list\n  const handleKeyDownFunc = event => {\n    if (readOnly || disabled) return;\n    if (!event) return;\n    switch (event.key) {\n      case 'ArrowDown':\n        event.preventDefault();\n        if (open) break;\n        setOpen(true);\n        break;\n      case 'ArrowUp':\n        event.preventDefault();\n        /* If we are on the first item, close */\n        if (activeIndex !== 0) break;\n        setOpen(false);\n        break;\n      case 'Enter':\n        {\n          event.preventDefault();\n          // ignore if it is closed\n          if (!open) break;\n          // check if we are in the custom components\n          if (activeIndex <= interactiveChildren.length - 1) {\n            const selectedComponent = interactiveChildren[activeIndex];\n            if (selectedComponent.props.onSelect) {\n              selectedComponent?.props.onSelect();\n              return;\n            }\n          }\n          // if we are in the options, find the actual index\n          const valueIndex = activeIndex - interactiveChildren.length;\n          const option = filteredOptions[valueIndex];\n          handleSelectOption({\n            option: options[option]\n          });\n          break;\n        }\n      case 'Backspace':\n        // if we are in single mode, we need to set selectedOptions to empty\n        if (!multiple) {\n          const lastOption = Object.keys(selectedOptions).pop();\n          lastOption && handleSelectOption({\n            option: selectedOptions[lastOption],\n            remove: true\n          });\n          break;\n        }\n        if (inputValue === '' && multiple) {\n          const lastOption = Object.keys(selectedOptions).pop();\n          /* Remove last option, and use handleSelectOption */\n          lastOption && handleSelectOption({\n            option: selectedOptions[lastOption],\n            remove: true\n          });\n        }\n        break;\n    }\n  };\n  const handleKeyDown = useDebounceCallback(handleKeyDownFunc, 20);\n  return handleKeyDown;\n};\nexport { useComboboxKeyboard };","map":{"version":3,"names":["useComboboxId","useDebounceCallback","useComboboxKeyboard","readOnly","disabled","interactiveChildren","filteredOptions","inputValue","selectedOptions","multiple","open","options","setOpen","handleSelectOption","activeIndex","handleKeyDownFunc","event","key","preventDefault","length","selectedComponent","props","onSelect","valueIndex","option","lastOption","Object","keys","pop","remove","handleKeyDown"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/Combobox/useComboboxKeyboard.js"],"sourcesContent":["'use client';\nimport { useComboboxId } from './ComboboxIdContext.js';\nimport { useDebounceCallback } from '../../utilities/hooks/useDebounceCallback/useDebounceCallback.js';\n\nconst useComboboxKeyboard = ({ readOnly, disabled, interactiveChildren, filteredOptions, inputValue, selectedOptions, multiple, open, options, setOpen, handleSelectOption, }) => {\n    const { activeIndex } = useComboboxId();\n    // handle keyboard navigation in the list\n    const handleKeyDownFunc = (event) => {\n        if (readOnly || disabled)\n            return;\n        if (!event)\n            return;\n        switch (event.key) {\n            case 'ArrowDown':\n                event.preventDefault();\n                if (open)\n                    break;\n                setOpen(true);\n                break;\n            case 'ArrowUp':\n                event.preventDefault();\n                /* If we are on the first item, close */\n                if (activeIndex !== 0)\n                    break;\n                setOpen(false);\n                break;\n            case 'Enter': {\n                event.preventDefault();\n                // ignore if it is closed\n                if (!open)\n                    break;\n                // check if we are in the custom components\n                if (activeIndex <= interactiveChildren.length - 1) {\n                    const selectedComponent = interactiveChildren[activeIndex];\n                    if (selectedComponent.props.onSelect) {\n                        selectedComponent?.props.onSelect();\n                        return;\n                    }\n                }\n                // if we are in the options, find the actual index\n                const valueIndex = activeIndex - interactiveChildren.length;\n                const option = filteredOptions[valueIndex];\n                handleSelectOption({ option: options[option] });\n                break;\n            }\n            case 'Backspace':\n                // if we are in single mode, we need to set selectedOptions to empty\n                if (!multiple) {\n                    const lastOption = Object.keys(selectedOptions).pop();\n                    lastOption &&\n                        handleSelectOption({\n                            option: selectedOptions[lastOption],\n                            remove: true,\n                        });\n                    break;\n                }\n                if (inputValue === '' && multiple) {\n                    const lastOption = Object.keys(selectedOptions).pop();\n                    /* Remove last option, and use handleSelectOption */\n                    lastOption &&\n                        handleSelectOption({\n                            option: selectedOptions[lastOption],\n                            remove: true,\n                        });\n                }\n                break;\n        }\n    };\n    const handleKeyDown = useDebounceCallback(handleKeyDownFunc, 20);\n    return handleKeyDown;\n};\n\nexport { useComboboxKeyboard };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,aAAa,QAAQ,wBAAwB;AACtD,SAASC,mBAAmB,QAAQ,kEAAkE;AAEtG,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,mBAAmB;EAAEC,eAAe;EAAEC,UAAU;EAAEC,eAAe;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAoB,CAAC,KAAK;EAC9K,MAAM;IAAEC;EAAY,CAAC,GAAGd,aAAa,CAAC,CAAC;EACvC;EACA,MAAMe,iBAAiB,GAAIC,KAAK,IAAK;IACjC,IAAIb,QAAQ,IAAIC,QAAQ,EACpB;IACJ,IAAI,CAACY,KAAK,EACN;IACJ,QAAQA,KAAK,CAACC,GAAG;MACb,KAAK,WAAW;QACZD,KAAK,CAACE,cAAc,CAAC,CAAC;QACtB,IAAIR,IAAI,EACJ;QACJE,OAAO,CAAC,IAAI,CAAC;QACb;MACJ,KAAK,SAAS;QACVI,KAAK,CAACE,cAAc,CAAC,CAAC;QACtB;QACA,IAAIJ,WAAW,KAAK,CAAC,EACjB;QACJF,OAAO,CAAC,KAAK,CAAC;QACd;MACJ,KAAK,OAAO;QAAE;UACVI,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB;UACA,IAAI,CAACR,IAAI,EACL;UACJ;UACA,IAAII,WAAW,IAAIT,mBAAmB,CAACc,MAAM,GAAG,CAAC,EAAE;YAC/C,MAAMC,iBAAiB,GAAGf,mBAAmB,CAACS,WAAW,CAAC;YAC1D,IAAIM,iBAAiB,CAACC,KAAK,CAACC,QAAQ,EAAE;cAClCF,iBAAiB,EAAEC,KAAK,CAACC,QAAQ,CAAC,CAAC;cACnC;YACJ;UACJ;UACA;UACA,MAAMC,UAAU,GAAGT,WAAW,GAAGT,mBAAmB,CAACc,MAAM;UAC3D,MAAMK,MAAM,GAAGlB,eAAe,CAACiB,UAAU,CAAC;UAC1CV,kBAAkB,CAAC;YAAEW,MAAM,EAAEb,OAAO,CAACa,MAAM;UAAE,CAAC,CAAC;UAC/C;QACJ;MACA,KAAK,WAAW;QACZ;QACA,IAAI,CAACf,QAAQ,EAAE;UACX,MAAMgB,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACnB,eAAe,CAAC,CAACoB,GAAG,CAAC,CAAC;UACrDH,UAAU,IACNZ,kBAAkB,CAAC;YACfW,MAAM,EAAEhB,eAAe,CAACiB,UAAU,CAAC;YACnCI,MAAM,EAAE;UACZ,CAAC,CAAC;UACN;QACJ;QACA,IAAItB,UAAU,KAAK,EAAE,IAAIE,QAAQ,EAAE;UAC/B,MAAMgB,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACnB,eAAe,CAAC,CAACoB,GAAG,CAAC,CAAC;UACrD;UACAH,UAAU,IACNZ,kBAAkB,CAAC;YACfW,MAAM,EAAEhB,eAAe,CAACiB,UAAU,CAAC;YACnCI,MAAM,EAAE;UACZ,CAAC,CAAC;QACV;QACA;IACR;EACJ,CAAC;EACD,MAAMC,aAAa,GAAG7B,mBAAmB,CAACc,iBAAiB,EAAE,EAAE,CAAC;EAChE,OAAOe,aAAa;AACxB,CAAC;AAED,SAAS5B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}