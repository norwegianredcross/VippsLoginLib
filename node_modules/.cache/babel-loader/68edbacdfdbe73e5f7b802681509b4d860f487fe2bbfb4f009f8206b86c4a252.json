{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport cl from 'clsx/lite';\nimport { forwardRef, useId, useState, createContext } from 'react';\nimport { RovingFocusRoot } from '../../utilities/RovingFocus/RovingFocusRoot.js';\nconst ToggleGroupContext = createContext({});\n/**\n * Display a group of buttons that can be toggled between.\n *\n * @example\n * <ToggleGroup onChange={(value) => console.log(value)}>\n *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>\n *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>\n *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>\n * </ToggleGroup>\n */\nconst ToggleGroup = forwardRef(function ToggleGroup({\n  children,\n  value,\n  defaultValue,\n  onChange,\n  name,\n  className,\n  ...rest\n}, ref) {\n  const nameId = useId();\n  const isControlled = value !== undefined;\n  const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);\n  let onValueChange = onChange;\n  if (!isControlled) {\n    onValueChange = newValue => {\n      setUncontrolledValue(newValue);\n      onChange?.(newValue);\n    };\n    value = uncontrolledValue;\n  }\n  return jsx(ToggleGroupContext.Provider, {\n    value: {\n      value,\n      defaultValue,\n      name: name ?? `togglegroup-name-${nameId}`,\n      onChange: onValueChange\n    },\n    children: jsx(RovingFocusRoot, {\n      asChild: true,\n      activeValue: value,\n      orientation: 'ambiguous',\n      children: jsxs(\"div\", {\n        className: cl('ds-togglegroup', className),\n        role: 'radiogroup',\n        ref: ref,\n        ...rest,\n        children: [name && jsx(\"input\", {\n          type: 'hidden',\n          name: name,\n          value: value\n        }), children]\n      })\n    })\n  });\n});\nexport { ToggleGroup, ToggleGroupContext };","map":{"version":3,"names":["jsx","jsxs","cl","forwardRef","useId","useState","createContext","RovingFocusRoot","ToggleGroupContext","ToggleGroup","children","value","defaultValue","onChange","name","className","rest","ref","nameId","isControlled","undefined","uncontrolledValue","setUncontrolledValue","onValueChange","newValue","Provider","asChild","activeValue","orientation","role","type"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/ToggleGroup/ToggleGroup.js"],"sourcesContent":["'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport cl from 'clsx/lite';\nimport { forwardRef, useId, useState, createContext } from 'react';\nimport { RovingFocusRoot } from '../../utilities/RovingFocus/RovingFocusRoot.js';\n\nconst ToggleGroupContext = createContext({});\n/**\n * Display a group of buttons that can be toggled between.\n *\n * @example\n * <ToggleGroup onChange={(value) => console.log(value)}>\n *   <ToggleGroup.Item value='1'>Toggle 1</ToggleGroup.Item>\n *   <ToggleGroup.Item value='2'>Toggle 2</ToggleGroup.Item>\n *   <ToggleGroup.Item value='3'>Toggle 3</ToggleGroup.Item>\n * </ToggleGroup>\n */\nconst ToggleGroup = forwardRef(function ToggleGroup({ children, value, defaultValue, onChange, name, className, ...rest }, ref) {\n    const nameId = useId();\n    const isControlled = value !== undefined;\n    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);\n    let onValueChange = onChange;\n    if (!isControlled) {\n        onValueChange = (newValue) => {\n            setUncontrolledValue(newValue);\n            onChange?.(newValue);\n        };\n        value = uncontrolledValue;\n    }\n    return (jsx(ToggleGroupContext.Provider, { value: {\n            value,\n            defaultValue,\n            name: name ?? `togglegroup-name-${nameId}`,\n            onChange: onValueChange,\n        }, children: jsx(RovingFocusRoot, { asChild: true, activeValue: value, orientation: 'ambiguous', children: jsxs(\"div\", { className: cl('ds-togglegroup', className), role: 'radiogroup', ref: ref, ...rest, children: [name && jsx(\"input\", { type: 'hidden', name: name, value: value }), children] }) }) }));\n});\n\nexport { ToggleGroup, ToggleGroupContext };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,OAAOC,EAAE,MAAM,WAAW;AAC1B,SAASC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,OAAO;AAClE,SAASC,eAAe,QAAQ,gDAAgD;AAEhF,MAAMC,kBAAkB,GAAGF,aAAa,CAAC,CAAC,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAGN,UAAU,CAAC,SAASM,WAAWA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,YAAY;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,EAAEC,GAAG,EAAE;EAC5H,MAAMC,MAAM,GAAGd,KAAK,CAAC,CAAC;EACtB,MAAMe,YAAY,GAAGR,KAAK,KAAKS,SAAS;EACxC,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CAACO,YAAY,CAAC;EACxE,IAAIW,aAAa,GAAGV,QAAQ;EAC5B,IAAI,CAACM,YAAY,EAAE;IACfI,aAAa,GAAIC,QAAQ,IAAK;MAC1BF,oBAAoB,CAACE,QAAQ,CAAC;MAC9BX,QAAQ,GAAGW,QAAQ,CAAC;IACxB,CAAC;IACDb,KAAK,GAAGU,iBAAiB;EAC7B;EACA,OAAQrB,GAAG,CAACQ,kBAAkB,CAACiB,QAAQ,EAAE;IAAEd,KAAK,EAAE;MAC1CA,KAAK;MACLC,YAAY;MACZE,IAAI,EAAEA,IAAI,IAAI,oBAAoBI,MAAM,EAAE;MAC1CL,QAAQ,EAAEU;IACd,CAAC;IAAEb,QAAQ,EAAEV,GAAG,CAACO,eAAe,EAAE;MAAEmB,OAAO,EAAE,IAAI;MAAEC,WAAW,EAAEhB,KAAK;MAAEiB,WAAW,EAAE,WAAW;MAAElB,QAAQ,EAAET,IAAI,CAAC,KAAK,EAAE;QAAEc,SAAS,EAAEb,EAAE,CAAC,gBAAgB,EAAEa,SAAS,CAAC;QAAEc,IAAI,EAAE,YAAY;QAAEZ,GAAG,EAAEA,GAAG;QAAE,GAAGD,IAAI;QAAEN,QAAQ,EAAE,CAACI,IAAI,IAAId,GAAG,CAAC,OAAO,EAAE;UAAE8B,IAAI,EAAE,QAAQ;UAAEhB,IAAI,EAAEA,IAAI;UAAEH,KAAK,EAAEA;QAAM,CAAC,CAAC,EAAED,QAAQ;MAAE,CAAC;IAAE,CAAC;EAAE,CAAC,CAAC;AACrT,CAAC,CAAC;AAEF,SAASD,WAAW,EAAED,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}