{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport cl from 'clsx/lite';\nimport { forwardRef } from 'react';\nimport { Input } from '../Input/Input.js';\n\n/**\n * Chip.Button used for interaction\n *\n * @example\n * <Chip.Button>Click me</Chip.Button>\n */\nconst ChipButton = forwardRef(function ChipButton({\n  asChild,\n  className,\n  ...rest\n}, ref) {\n  const Component = asChild ? Slot : 'button';\n  return jsx(Component, {\n    className: cl('ds-chip', className),\n    type: asChild ? undefined : 'button',\n    ref: ref,\n    ...rest\n  });\n});\n/**\n * Chip.Removable used for interaction\n * @example\n * <Chip.Removable>Click to remove me</Chip.Removable>\n */\nconst ChipRemovable = forwardRef(function ChipRemovable(props, ref) {\n  return jsx(ChipButton, {\n    \"data-removable\": true,\n    ref: ref,\n    ...props\n  });\n});\n/**\n * Chip.Checkbox used for multiselection\n * @example\n * <Chip.Checkbox name=\"language\" value=\"nynorsk\">Nynorsk</Chip.Checkbox>\n * <Chip.Checkbox name=\"language\" value=\"bokmål\">Bokmål</Chip.Checkbox>\n */\nconst ChipCheckbox = forwardRef(function ChipCheckbox({\n  asChild,\n  children,\n  className,\n  'data-size': size,\n  'data-color': color,\n  ...rest\n}, ref) {\n  const inputType = rest.type ?? 'checkbox';\n  const Component = asChild ? Slot : 'label';\n  return jsxs(Component, {\n    className: cl('ds-chip', className),\n    \"data-size\": size,\n    \"data-color\": color,\n    ref: ref,\n    children: [jsx(Input, {\n      ...rest,\n      type: inputType\n    }), jsx(Slottable, {\n      children: children\n    })]\n  });\n});\n/**\n * Chip.Radio used for single selection\n * @example\n * <Chip.Radio name=\"language\" value=\"nynorsk\">Nynorsk</Chip.Radio>\n * <Chip.Radio name=\"language\" value=\"bokmål\">Bokmål</Chip.Radio>\n */\nconst ChipRadio = forwardRef(function ChipRadio(props, ref) {\n  return jsx(ChipCheckbox, {\n    ref,\n    type: 'radio',\n    ...props\n  });\n});\nexport { ChipButton, ChipCheckbox, ChipRadio, ChipRemovable };","map":{"version":3,"names":["jsx","jsxs","Slot","Slottable","cl","forwardRef","Input","ChipButton","asChild","className","rest","ref","Component","type","undefined","ChipRemovable","props","ChipCheckbox","children","size","color","inputType","ChipRadio"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/Chip/Chips.js"],"sourcesContent":["'use client';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { Slot, Slottable } from '@radix-ui/react-slot';\nimport cl from 'clsx/lite';\nimport { forwardRef } from 'react';\nimport { Input } from '../Input/Input.js';\n\n/**\n * Chip.Button used for interaction\n *\n * @example\n * <Chip.Button>Click me</Chip.Button>\n */\nconst ChipButton = forwardRef(function ChipButton({ asChild, className, ...rest }, ref) {\n    const Component = asChild ? Slot : 'button';\n    return (jsx(Component, { className: cl('ds-chip', className), type: asChild ? undefined : 'button', ref: ref, ...rest }));\n});\n/**\n * Chip.Removable used for interaction\n * @example\n * <Chip.Removable>Click to remove me</Chip.Removable>\n */\nconst ChipRemovable = forwardRef(function ChipRemovable(props, ref) {\n    return jsx(ChipButton, { \"data-removable\": true, ref: ref, ...props });\n});\n/**\n * Chip.Checkbox used for multiselection\n * @example\n * <Chip.Checkbox name=\"language\" value=\"nynorsk\">Nynorsk</Chip.Checkbox>\n * <Chip.Checkbox name=\"language\" value=\"bokmål\">Bokmål</Chip.Checkbox>\n */\nconst ChipCheckbox = forwardRef(function ChipCheckbox({ asChild, children, className, 'data-size': size, 'data-color': color, ...rest }, ref) {\n    const inputType = rest.type ?? 'checkbox';\n    const Component = asChild ? Slot : 'label';\n    return (jsxs(Component, { className: cl('ds-chip', className), \"data-size\": size, \"data-color\": color, ref: ref, children: [jsx(Input, { ...rest, type: inputType }), jsx(Slottable, { children: children })] }));\n});\n/**\n * Chip.Radio used for single selection\n * @example\n * <Chip.Radio name=\"language\" value=\"nynorsk\">Nynorsk</Chip.Radio>\n * <Chip.Radio name=\"language\" value=\"bokmål\">Bokmål</Chip.Radio>\n */\nconst ChipRadio = forwardRef(function ChipRadio(props, ref) {\n    return jsx(ChipCheckbox, { ref, type: 'radio', ...props });\n});\n\nexport { ChipButton, ChipCheckbox, ChipRadio, ChipRemovable };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,SAASC,IAAI,EAAEC,SAAS,QAAQ,sBAAsB;AACtD,OAAOC,EAAE,MAAM,WAAW;AAC1B,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,KAAK,QAAQ,mBAAmB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAGF,UAAU,CAAC,SAASE,UAAUA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,EAAEC,GAAG,EAAE;EACpF,MAAMC,SAAS,GAAGJ,OAAO,GAAGN,IAAI,GAAG,QAAQ;EAC3C,OAAQF,GAAG,CAACY,SAAS,EAAE;IAAEH,SAAS,EAAEL,EAAE,CAAC,SAAS,EAAEK,SAAS,CAAC;IAAEI,IAAI,EAAEL,OAAO,GAAGM,SAAS,GAAG,QAAQ;IAAEH,GAAG,EAAEA,GAAG;IAAE,GAAGD;EAAK,CAAC,CAAC;AAC5H,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,MAAMK,aAAa,GAAGV,UAAU,CAAC,SAASU,aAAaA,CAACC,KAAK,EAAEL,GAAG,EAAE;EAChE,OAAOX,GAAG,CAACO,UAAU,EAAE;IAAE,gBAAgB,EAAE,IAAI;IAAEI,GAAG,EAAEA,GAAG;IAAE,GAAGK;EAAM,CAAC,CAAC;AAC1E,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGZ,UAAU,CAAC,SAASY,YAAYA,CAAC;EAAET,OAAO;EAAEU,QAAQ;EAAET,SAAS;EAAE,WAAW,EAAEU,IAAI;EAAE,YAAY,EAAEC,KAAK;EAAE,GAAGV;AAAK,CAAC,EAAEC,GAAG,EAAE;EAC1I,MAAMU,SAAS,GAAGX,IAAI,CAACG,IAAI,IAAI,UAAU;EACzC,MAAMD,SAAS,GAAGJ,OAAO,GAAGN,IAAI,GAAG,OAAO;EAC1C,OAAQD,IAAI,CAACW,SAAS,EAAE;IAAEH,SAAS,EAAEL,EAAE,CAAC,SAAS,EAAEK,SAAS,CAAC;IAAE,WAAW,EAAEU,IAAI;IAAE,YAAY,EAAEC,KAAK;IAAET,GAAG,EAAEA,GAAG;IAAEO,QAAQ,EAAE,CAAClB,GAAG,CAACM,KAAK,EAAE;MAAE,GAAGI,IAAI;MAAEG,IAAI,EAAEQ;IAAU,CAAC,CAAC,EAAErB,GAAG,CAACG,SAAS,EAAE;MAAEe,QAAQ,EAAEA;IAAS,CAAC,CAAC;EAAE,CAAC,CAAC;AACpN,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,SAAS,GAAGjB,UAAU,CAAC,SAASiB,SAASA,CAACN,KAAK,EAAEL,GAAG,EAAE;EACxD,OAAOX,GAAG,CAACiB,YAAY,EAAE;IAAEN,GAAG;IAAEE,IAAI,EAAE,OAAO;IAAE,GAAGG;EAAM,CAAC,CAAC;AAC9D,CAAC,CAAC;AAEF,SAAST,UAAU,EAAEU,YAAY,EAAEK,SAAS,EAAEP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}