{"ast":null,"code":"'use client';\n\nimport { useState, useId, useRef, useEffect } from 'react';\nconst toggleIndeterminate = (getIndeterminateInputs, getInputs) => {\n  const inputs = getIndeterminateInputs();\n  const checked = !!getInputs(true).length;\n  const unchecked = !!getInputs(false).length;\n  for (const input of inputs) {\n    input.indeterminate = unchecked && checked;\n    input.checked = !unchecked && checked;\n  }\n};\nfunction useCheckboxGroup(props) {\n  const {\n    error,\n    name: groupName,\n    onChange,\n    value = [],\n    disabled,\n    readOnly,\n    required\n  } = props || {};\n  const [groupValue, setGroupValue] = useState(value);\n  const namedId = useId();\n  const errorId = useId();\n  const checkboxRefs = useRef(new Set());\n  const indeterminateRefs = useRef(new Set());\n  const inputRefs = useRef(new Map());\n  const getInputs = checked => Array.from(checkboxRefs.current.values()).filter(input => input.checked === checked);\n  const getIndeterminateInputs = () => Array.from(indeterminateRefs.current.values());\n  useEffect(() => {\n    toggleIndeterminate(getIndeterminateInputs, getInputs);\n  }, [groupValue]);\n  return {\n    /**\n     * Current value of the group.\n     */\n    value: groupValue,\n    /**\n     * Set the value of the group.\n     *\n     * @param value string[]\n     * @returns void\n     */\n    setValue: setGroupValue,\n    /**\n     * Props to send to the `Checkbox` component.\n     * Accepts value or object\n     * @example\n     * <Checkbox {...getCheckboxProps('value')} />\n     *\n     * @example allow indeterminate\n     * <Checkbox {...getCheckboxProps({ value: 'all', allowIndeterminate: true })} />\n     */\n    getCheckboxProps: propsOrValue => {\n      const props = typeof propsOrValue === 'string' ? {\n        value: propsOrValue\n      } : propsOrValue || {};\n      const {\n        allowIndeterminate = false,\n        ref: forwardedRef = undefined,\n        value = '',\n        ...rest\n      } = props;\n      const handleRef = element => {\n        if (element) {\n          const refs = allowIndeterminate ? indeterminateRefs : checkboxRefs;\n          refs.current.add(element);\n          inputRefs.current.set(value, element);\n          if (getIndeterminateInputs().length) {\n            toggleIndeterminate(getIndeterminateInputs, getInputs);\n          }\n        } else {\n          const oldElement = inputRefs.current.get(value);\n          if (oldElement) {\n            checkboxRefs.current.delete(oldElement);\n            indeterminateRefs.current.delete(oldElement);\n            inputRefs.current.delete(value);\n          }\n        }\n        if (forwardedRef) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(element);\n          } else {\n            forwardedRef.current = element;\n          }\n        }\n      };\n      const handleChange = () => {\n        const nextGroupValue = Array.from(getInputs(true), ({\n          value\n        }) => value);\n        setGroupValue(nextGroupValue);\n        onChange?.(nextGroupValue, groupValue);\n      };\n      const indeterminateChange = () => {\n        const element = inputRefs.current.get(value);\n        if (!element) return;\n        const checked = !!element.checked;\n        for (const input of getInputs(!checked)) {\n          input.click();\n        }\n      };\n      return {\n        ...rest,\n        'aria-describedby': `${error ? errorId : ''} ${rest['aria-describedby'] || ''}`.trim() || undefined,\n        'aria-invalid': !!error || rest['aria-invalid'],\n        checked: allowIndeterminate ? undefined : groupValue.includes(value),\n        name: rest.name || groupName || namedId,\n        onChange: e => {\n          rest.onChange?.(e);\n          if (e.defaultPrevented) return;\n          allowIndeterminate && indeterminateChange();\n          handleChange();\n        },\n        ref: handleRef,\n        value,\n        disabled: disabled || rest.disabled,\n        readOnly: readOnly || rest.readOnly,\n        required: required || rest.required\n      };\n    },\n    /**\n     * Props to send to the `ValidationMessage` component.\n     *\n     * @example\n     * <ValidationMessage {...validationMessageProps} />\n     */\n    validationMessageProps: {\n      children: error,\n      hidden: !error,\n      id: errorId\n    }\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useState","useId","useRef","useEffect","toggleIndeterminate","getIndeterminateInputs","getInputs","inputs","checked","length","unchecked","input","indeterminate","useCheckboxGroup","props","error","name","groupName","onChange","value","disabled","readOnly","required","groupValue","setGroupValue","namedId","errorId","checkboxRefs","Set","indeterminateRefs","inputRefs","Map","Array","from","current","values","filter","setValue","getCheckboxProps","propsOrValue","allowIndeterminate","ref","forwardedRef","undefined","rest","handleRef","element","refs","add","set","oldElement","get","delete","handleChange","nextGroupValue","indeterminateChange","click","trim","includes","e","defaultPrevented","validationMessageProps","children","hidden","id"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/utilities/hooks/useCheckboxGroup/useCheckboxGroup.js"],"sourcesContent":["'use client';\nimport { useState, useId, useRef, useEffect } from 'react';\n\nconst toggleIndeterminate = (getIndeterminateInputs, getInputs) => {\n    const inputs = getIndeterminateInputs();\n    const checked = !!getInputs(true).length;\n    const unchecked = !!getInputs(false).length;\n    for (const input of inputs) {\n        input.indeterminate = unchecked && checked;\n        input.checked = !unchecked && checked;\n    }\n};\nfunction useCheckboxGroup(props) {\n    const { error, name: groupName, onChange, value = [], disabled, readOnly, required, } = props || {};\n    const [groupValue, setGroupValue] = useState(value);\n    const namedId = useId();\n    const errorId = useId();\n    const checkboxRefs = useRef(new Set());\n    const indeterminateRefs = useRef(new Set());\n    const inputRefs = useRef(new Map());\n    const getInputs = (checked) => Array.from(checkboxRefs.current.values()).filter((input) => input.checked === checked);\n    const getIndeterminateInputs = () => Array.from(indeterminateRefs.current.values());\n    useEffect(() => {\n        toggleIndeterminate(getIndeterminateInputs, getInputs);\n    }, [groupValue]);\n    return {\n        /**\n         * Current value of the group.\n         */\n        value: groupValue,\n        /**\n         * Set the value of the group.\n         *\n         * @param value string[]\n         * @returns void\n         */\n        setValue: setGroupValue,\n        /**\n         * Props to send to the `Checkbox` component.\n         * Accepts value or object\n         * @example\n         * <Checkbox {...getCheckboxProps('value')} />\n         *\n         * @example allow indeterminate\n         * <Checkbox {...getCheckboxProps({ value: 'all', allowIndeterminate: true })} />\n         */\n        getCheckboxProps: (propsOrValue) => {\n            const props = typeof propsOrValue === 'string'\n                ? { value: propsOrValue }\n                : propsOrValue || {};\n            const { allowIndeterminate = false, ref: forwardedRef = undefined, value = '', ...rest } = props;\n            const handleRef = (element) => {\n                if (element) {\n                    const refs = allowIndeterminate ? indeterminateRefs : checkboxRefs;\n                    refs.current.add(element);\n                    inputRefs.current.set(value, element);\n                    if (getIndeterminateInputs().length) {\n                        toggleIndeterminate(getIndeterminateInputs, getInputs);\n                    }\n                }\n                else {\n                    const oldElement = inputRefs.current.get(value);\n                    if (oldElement) {\n                        checkboxRefs.current.delete(oldElement);\n                        indeterminateRefs.current.delete(oldElement);\n                        inputRefs.current.delete(value);\n                    }\n                }\n                if (forwardedRef) {\n                    if (typeof forwardedRef === 'function') {\n                        forwardedRef(element);\n                    }\n                    else {\n                        forwardedRef.current = element;\n                    }\n                }\n            };\n            const handleChange = () => {\n                const nextGroupValue = Array.from(getInputs(true), ({ value }) => value);\n                setGroupValue(nextGroupValue);\n                onChange?.(nextGroupValue, groupValue);\n            };\n            const indeterminateChange = () => {\n                const element = inputRefs.current.get(value);\n                if (!element)\n                    return;\n                const checked = !!element.checked;\n                for (const input of getInputs(!checked)) {\n                    input.click();\n                }\n            };\n            return {\n                ...rest,\n                'aria-describedby': `${error ? errorId : ''} ${rest['aria-describedby'] || ''}`.trim() ||\n                    undefined,\n                'aria-invalid': !!error || rest['aria-invalid'],\n                checked: allowIndeterminate ? undefined : groupValue.includes(value),\n                name: rest.name || groupName || namedId,\n                onChange: (e) => {\n                    rest.onChange?.(e);\n                    if (e.defaultPrevented)\n                        return;\n                    allowIndeterminate && indeterminateChange();\n                    handleChange();\n                },\n                ref: handleRef,\n                value,\n                disabled: disabled || rest.disabled,\n                readOnly: readOnly || rest.readOnly,\n                required: required || rest.required,\n            };\n        },\n        /**\n         * Props to send to the `ValidationMessage` component.\n         *\n         * @example\n         * <ValidationMessage {...validationMessageProps} />\n         */\n        validationMessageProps: {\n            children: error,\n            hidden: !error,\n            id: errorId,\n        },\n    };\n}\n\nexport { useCheckboxGroup };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}