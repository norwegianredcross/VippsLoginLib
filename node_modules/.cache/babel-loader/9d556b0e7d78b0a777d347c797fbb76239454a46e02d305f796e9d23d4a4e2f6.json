{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useMergeRefs } from '@floating-ui/react';\nimport cl from 'clsx/lite';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport '@u-elements/u-details';\n\n/**\n * Details component, contains `Details.Summary` and `Details.Content` components.\n *\n * @example\n * <Details>\n *  <Details.Summary>Header</Details.Summary>\n *  <Details.Content>Content</Details.Content>\n * </Details>\n */\nconst Details = forwardRef(function Details({\n  className,\n  open,\n  defaultOpen = false,\n  variant = 'default',\n  onToggle,\n  ...rest\n}, ref) {\n  const detailsRef = useRef(null);\n  const initialOpen = useRef(defaultOpen); // Allow rendering defaultOpen on server, but only render once on client\n  const mergedRefs = useMergeRefs([detailsRef, ref]);\n  const onToggleRef = useRef(onToggle); // Using ref to enable access inside useEffect without re-binding event listeners\n  const openRef = useRef(open);\n  onToggleRef.current = onToggle;\n  openRef.current = open;\n  // Provide onToggle event and controlled state\n  useEffect(() => {\n    const details = detailsRef.current;\n    const handleToggle = event => {\n      if (!details || details?.open === openRef.current) return;\n      onToggleRef.current?.(event);\n      if (openRef.current !== undefined) details.open = openRef.current; // Don't update DOM unless controlled state changes\n    };\n    details?.addEventListener('toggle', handleToggle, true);\n    return () => details?.removeEventListener('toggle', handleToggle, true);\n  }, []);\n  return jsx(\"u-details\", {\n    class: cl('ds-details', className),\n    open: (open ?? initialOpen.current) || undefined,\n    \"data-variant\": variant,\n    ref: mergedRefs,\n    ...rest\n  });\n});\nexport { Details };","map":{"version":3,"names":["jsx","useMergeRefs","cl","forwardRef","useRef","useEffect","Details","className","open","defaultOpen","variant","onToggle","rest","ref","detailsRef","initialOpen","mergedRefs","onToggleRef","openRef","current","details","handleToggle","event","undefined","addEventListener","removeEventListener","class"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@digdir/designsystemet-react/dist/esm/components/Details/Details.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { useMergeRefs } from '@floating-ui/react';\nimport cl from 'clsx/lite';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport '@u-elements/u-details';\n\n/**\n * Details component, contains `Details.Summary` and `Details.Content` components.\n *\n * @example\n * <Details>\n *  <Details.Summary>Header</Details.Summary>\n *  <Details.Content>Content</Details.Content>\n * </Details>\n */\nconst Details = forwardRef(function Details({ className, open, defaultOpen = false, variant = 'default', onToggle, ...rest }, ref) {\n    const detailsRef = useRef(null);\n    const initialOpen = useRef(defaultOpen); // Allow rendering defaultOpen on server, but only render once on client\n    const mergedRefs = useMergeRefs([detailsRef, ref]);\n    const onToggleRef = useRef(onToggle); // Using ref to enable access inside useEffect without re-binding event listeners\n    const openRef = useRef(open);\n    onToggleRef.current = onToggle;\n    openRef.current = open;\n    // Provide onToggle event and controlled state\n    useEffect(() => {\n        const details = detailsRef.current;\n        const handleToggle = (event) => {\n            if (!details || details?.open === openRef.current)\n                return;\n            onToggleRef.current?.(event);\n            if (openRef.current !== undefined)\n                details.open = openRef.current; // Don't update DOM unless controlled state changes\n        };\n        details?.addEventListener('toggle', handleToggle, true);\n        return () => details?.removeEventListener('toggle', handleToggle, true);\n    }, []);\n    return (jsx(\"u-details\", { class: cl('ds-details', className), open: (open ?? initialOpen.current) || undefined, \"data-variant\": variant, ref: mergedRefs, ...rest }));\n});\n\nexport { Details };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAOC,EAAE,MAAM,WAAW;AAC1B,SAASC,UAAU,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACrD,OAAO,uBAAuB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGH,UAAU,CAAC,SAASG,OAAOA,CAAC;EAAEC,SAAS;EAAEC,IAAI;EAAEC,WAAW,GAAG,KAAK;EAAEC,OAAO,GAAG,SAAS;EAAEC,QAAQ;EAAE,GAAGC;AAAK,CAAC,EAAEC,GAAG,EAAE;EAC/H,MAAMC,UAAU,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMW,WAAW,GAAGX,MAAM,CAACK,WAAW,CAAC,CAAC,CAAC;EACzC,MAAMO,UAAU,GAAGf,YAAY,CAAC,CAACa,UAAU,EAAED,GAAG,CAAC,CAAC;EAClD,MAAMI,WAAW,GAAGb,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC;EACtC,MAAMO,OAAO,GAAGd,MAAM,CAACI,IAAI,CAAC;EAC5BS,WAAW,CAACE,OAAO,GAAGR,QAAQ;EAC9BO,OAAO,CAACC,OAAO,GAAGX,IAAI;EACtB;EACAH,SAAS,CAAC,MAAM;IACZ,MAAMe,OAAO,GAAGN,UAAU,CAACK,OAAO;IAClC,MAAME,YAAY,GAAIC,KAAK,IAAK;MAC5B,IAAI,CAACF,OAAO,IAAIA,OAAO,EAAEZ,IAAI,KAAKU,OAAO,CAACC,OAAO,EAC7C;MACJF,WAAW,CAACE,OAAO,GAAGG,KAAK,CAAC;MAC5B,IAAIJ,OAAO,CAACC,OAAO,KAAKI,SAAS,EAC7BH,OAAO,CAACZ,IAAI,GAAGU,OAAO,CAACC,OAAO,CAAC,CAAC;IACxC,CAAC;IACDC,OAAO,EAAEI,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,EAAE,IAAI,CAAC;IACvD,OAAO,MAAMD,OAAO,EAAEK,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,EAAE,IAAI,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC;EACN,OAAQrB,GAAG,CAAC,WAAW,EAAE;IAAE0B,KAAK,EAAExB,EAAE,CAAC,YAAY,EAAEK,SAAS,CAAC;IAAEC,IAAI,EAAE,CAACA,IAAI,IAAIO,WAAW,CAACI,OAAO,KAAKI,SAAS;IAAE,cAAc,EAAEb,OAAO;IAAEG,GAAG,EAAEG,UAAU;IAAE,GAAGJ;EAAK,CAAC,CAAC;AACzK,CAAC,CAAC;AAEF,SAASN,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}