{"ast":null,"code":"//https://github.com/mui/material-ui/blob/master/packages/mui-utils/src/useId.ts\nimport React, { useEffect, useState } from \"react\";\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = useState(idOverride);\n  const id = idOverride || defaultId;\n  useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`aksel-icon-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\nconst maybeReactUseId = React[\"useId\" + \"\" // Workaround for https://github.com/webpack/webpack/issues/14814\n];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport function useId(idOverride) {\n  var _a;\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride !== null && idOverride !== void 0 ? idOverride : reactId.replace(/(:)/g, \"\");\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `useId` is invariant at runtime.\n  return (_a = useGlobalId(idOverride)) !== null && _a !== void 0 ? _a : \"\";\n}","map":{"version":3,"names":["React","useEffect","useState","globalId","useGlobalId","idOverride","defaultId","setDefaultId","id","maybeReactUseId","useId","undefined","reactId","replace","_a"],"sources":["/Users/riccardomarini/Dropbox/Lavori/RedCross/Login Vipps/LoginVippsLib/node_modules/@navikt/aksel-icons/src/util/useId.ts"],"sourcesContent":["//https://github.com/mui/material-ui/blob/master/packages/mui-utils/src/useId.ts\nimport React, { useEffect, useState } from \"react\";\n\nlet globalId = 0;\nfunction useGlobalId(idOverride?: string): string | undefined {\n  const [defaultId, setDefaultId] = useState(idOverride);\n  const id = idOverride || defaultId;\n  useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`aksel-icon-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\nconst maybeReactUseId: undefined | (() => string) = (React as any)[\n  \"useId\" + \"\" // Workaround for https://github.com/webpack/webpack/issues/14814\n];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport function useId(idOverride?: string): string | undefined {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride ?? reactId.replace(/(:)/g, \"\");\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `useId` is invariant at runtime.\n  return useGlobalId(idOverride) ?? \"\";\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,IAAIC,QAAQ,GAAG,CAAC;AAChB,SAASC,WAAWA,CAACC,UAAmB;EACtC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAACG,UAAU,CAAC;EACtD,MAAMG,EAAE,GAAGH,UAAU,IAAIC,SAAS;EAClCL,SAAS,CAAC,MAAK;IACb,IAAIK,SAAS,IAAI,IAAI,EAAE;MACrB;MACA;MACA;MACA;MACAH,QAAQ,IAAI,CAAC;MACbI,YAAY,CAAC,cAAcJ,QAAQ,EAAE,CAAC;IACxC;EACF,CAAC,EAAE,CAACG,SAAS,CAAC,CAAC;EACf,OAAOE,EAAE;AACX;AAEA,MAAMC,eAAe,GAAgCT,KAAa,CAChE,OAAO,GAAG,EAAE,CAAC;AAAA,CACd;AACD;;;;;;AAMA,OAAM,SAAUU,KAAKA,CAACL,UAAmB;;EACvC,IAAII,eAAe,KAAKE,SAAS,EAAE;IACjC,MAAMC,OAAO,GAAGH,eAAe,EAAE;IACjC,OAAOJ,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIO,OAAO,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EAClD;EACA;EACA,OAAO,CAAAC,EAAA,GAAAV,WAAW,CAACC,UAAU,CAAC,cAAAS,EAAA,cAAAA,EAAA,GAAI,EAAE;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}